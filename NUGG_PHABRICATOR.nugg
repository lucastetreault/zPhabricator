<?xml version="1.0" encoding="utf-16"?>
<nugget name="PHABRICATOR">
 <CLAS CLSNAME="ZCL_PHABRICATOR_USER" VERSION="1" LANGU="E" DESCRIPT="Phabricator Users" UUID="000C29E6E17A1EE49DA584CDFA0CA8E6" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZCL_PHABRICATOR_USER definition
  public
  final
  create private .

public section.
  type-pools ABAP .

  class-methods GET_BY_USERNAME
    importing
      !IV_USERNAME type STRING
    returning
      value(RO_USER) type ref to ZCL_PHABRICATOR_USER .
  methods GET_ID
    returning
      value(RV_ID) type STRING .
  methods GET_USERNAME
    returning
      value(RV_USERNAME) type STRING .</publicSection>
  <protectedSection>protected section.</protectedSection>
  <privateSection>private section.

  data IMAGE type STRING .
  data REALNAME type STRING .
  data URI type STRING .
  data USERNAME type STRING .
  data PHABRICATOR_ID type STRING .

  methods CONSTRUCTOR
    importing
      !IV_USER type ZSTR_PHABRICATOR_USER .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_PHABRICATOR_USER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="IMAGE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="PHABRICATOR_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="REALNAME" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="URI" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="USERNAME" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="CONSTRUCTOR" SCONAME="IV_USER" VERSION="1" LANGU="E" DESCRIPT="Phabricator User" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZSTR_PHABRICATOR_USER"/>
   <source>method CONSTRUCTOR.
    phabricator_id = iv_user-phid.
    username = iv_user-username.
    realname = iv_user-realname.
    image = iv_user-image.
    uri = iv_user-uri.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="GET_BY_USERNAME" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="GET_BY_USERNAME" SCONAME="IV_USERNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="GET_BY_USERNAME" SCONAME="RO_USER" VERSION="1" LANGU="E" DESCRIPT="Phabricator Users" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_USER"/>
   <source>method GET_BY_USERNAME.
    DATA: lo_url TYPE REF TO zcl_url,
      lv_username TYPE string,
      lt_users TYPE ztty_phabricator_user,
      lv_error_message TYPE string.

    FIELD-SYMBOLS: &lt;user&gt; TYPE zstr_phabricator_user.

    CREATE OBJECT lo_url
      EXPORTING
        iv_baseurl = zcl_phabricator_authentication=&gt;phabricator_url.

    lo_url-&gt;add_method( &apos;user.query?&apos; ).
    CONCATENATE &apos;[&quot;&apos; iv_username &apos;&quot;]&apos; INTO lv_username.
    lo_url-&gt;add_parameter( iv_key = &apos;params[usernames]&apos; iv_value = lv_username iv_no_condense = abap_true iv_no_quotes = abap_true ).

    zcl_phabricator_conduit=&gt;execute_method( EXPORTING io_url = lo_url CHANGING result = lt_users ).

    READ TABLE lt_users ASSIGNING &lt;user&gt; INDEX 1.
    IF sy-subrc NE 0.
      CONCATENATE &apos;Could not find phabricator user: &apos; iv_username INTO lv_error_message.
      MESSAGE lv_error_message TYPE &apos;E&apos;.
    ENDIF.

    CREATE OBJECT ro_user
      EXPORTING
        iv_user = &lt;user&gt;.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="GET_ID" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="GET_ID" SCONAME="RV_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_ID.
    rv_id = phabricator_id.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="GET_USERNAME" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_USER" CMPNAME="GET_USERNAME" SCONAME="RV_USERNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_USERNAME.
    rv_username = username.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" VERSION="1" LANGU="E" DESCRIPT="Create new revisions" UUID="000C29E6E17A1EE49DA63CAD99AB08E6" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="TTY_USERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" TYPTYPE="4" SRCROW1="4 " SRCCOLUMN1="4 " SRCROW2="4 " SRCCOLUMN2="63 " R3RELEASE="700" TYPESRC_LENG="62 " TYPESRC="tty_users TYPE STANDARD TABLE OF REF TO zcl_phabricator_user
"/>
  <publicSection>class ZCL_PHABRICATOR_REVISION_BLDER definition
  public
  final
  create public .

public section.
  type-pools ABAP .

  methods ADD_REVIEWER
    importing
      !IO_REVIEWER type ref to ZCL_PHABRICATOR_USER .
  methods SET_SUMMARY
    importing
      !IV_SUMMARY type STRING .
  methods SET_TITLE
    importing
      !IV_TITLE type STRING .
  methods COMMIT
    returning
      value(RO_REVISION) type ref to ZCL_PHABRICATOR_REVISION .
  methods SET_DIFF_ID
    importing
      !IV_DIFF_ID type STRING .
  methods CONSTRUCTOR
    importing
      !IV_TASK type TRKORR .</publicSection>
  <protectedSection>protected section.</protectedSection>
  <privateSection>private section.

  types:
    tty_users TYPE STANDARD TABLE OF REF TO zcl_phabricator_user .

  data DIFF_ID type STRING .
  data O_URL type ref to ZCL_URL .
  data SUMMARY type STRING .
  data TITLE type STRING .
  data REVIEWERS type TTY_USERS .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="DIFF_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="O_URL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_URL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="REVIEWERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TTY_USERS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="SUMMARY" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="TITLE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="ADD_REVIEWER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="ADD_REVIEWER" SCONAME="IO_REVIEWER" VERSION="1" LANGU="E" DESCRIPT="Phabricator Users" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_USER"/>
   <source>method ADD_REVIEWER.
    APPEND io_reviewer TO reviewers.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="COMMIT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="COMMIT" SCONAME="RO_REVISION" VERSION="1" LANGU="E" DESCRIPT="Phabricator Revision" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_REVISION"/>
   <source>method COMMIT.
    DATA: ls_fields TYPE zphabricator_create_revision,
          lv_fields_string TYPE string,
          lv_phid TYPE string,
          ls_result TYPE zphabricator_create.

    FIELD-SYMBOLS: &lt;reviewer&gt; TYPE REF TO zcl_phabricator_user.

    LOOP AT  reviewers ASSIGNING &lt;reviewer&gt;.
      lv_phid = &lt;reviewer&gt;-&gt;get_id( ).
      APPEND lv_phid TO ls_fields-reviewerphids.
    ENDLOOP.
    ls_fields-summary = summary.
    ls_fields-title = title.
    lv_fields_string = zcl_json_handler=&gt;abap2json( abap_data = ls_fields ).

    REPLACE FIRST OCCURRENCE OF &apos;REVIEWERPHIDS&apos; IN lv_fields_string WITH &apos;reviewerPHIDs&apos; IGNORING CASE. &quot;Because it cares about case and SAP hates case.

    o_url-&gt;add_parameter( iv_key = &apos;params[fields]&apos; iv_value = lv_fields_string iv_no_condense = abap_true iv_no_quotes = abap_true ).
    o_url-&gt;add_parameter( iv_key = &apos;params[diffid]&apos; iv_value = diff_id ).

    zcl_phabricator_conduit=&gt;execute_method( EXPORTING io_url = o_url CHANGING result = ls_result ).

    ro_revision = zcl_phabricator_revision=&gt;get_by_revision_id( iv_id = ls_result-revisionid ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="CONSTRUCTOR" SCONAME="IV_TASK" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <source>method CONSTRUCTOR.
    DATA: lo_existing_revision TYPE REF TO zcl_phabricator_revision,
          ls_existing_id TYPE string.

    CREATE OBJECT o_url
      EXPORTING
        iv_baseurl = zcl_phabricator_authentication=&gt;phabricator_url.

    lo_existing_revision = zcl_phabricator_revision=&gt;get_by_transport_task( iv_task ).
    IF lo_existing_revision IS NOT INITIAL.
      o_url-&gt;add_method( &apos;differential.updaterevision?&apos; ).

      ls_existing_id = lo_existing_revision-&gt;get_id( ).
      o_url-&gt;add_parameter( iv_key = &apos;params[id]&apos; iv_value = ls_existing_id ).
      o_url-&gt;add_parameter( iv_key = &apos;params[message]&apos; iv_value = &apos;Resumitting task for review&apos; iv_no_condense = abap_true ).
    ELSE.
      o_url-&gt;add_method( &apos;differential.createrevision?&apos; ).
    ENDIF.


endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="SET_DIFF_ID" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="SET_DIFF_ID" SCONAME="IV_DIFF_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method SET_DIFF_ID.
    diff_id = iv_diff_id.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="SET_SUMMARY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="SET_SUMMARY" SCONAME="IV_SUMMARY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method SET_SUMMARY.
    summary = iv_summary.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="SET_TITLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION_BLDER" CMPNAME="SET_TITLE" SCONAME="IV_TITLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method SET_TITLE.
    title = iv_title.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_PHABRICATOR_REVISION" VERSION="1" LANGU="E" DESCRIPT="Phabricator Revision" UUID="000C29E6E17A1EE49DA5C25915EA48E6" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZCL_PHABRICATOR_REVISION definition
  public
  final
  create private .

public section.
  type-pools ABAP .

  class-methods GET_BY_TRANSPORT_TASK
    importing
      !IV_TASK type TRKORR
    returning
      value(RO_REVISION) type ref to ZCL_PHABRICATOR_REVISION .
  methods GET_URL
    returning
      value(RV_URL) type STRING .
  methods IS_ACCEPTED
    returning
      value(RV_FLAG) type FLAG .
  methods CLOSE .
  class-methods GET_BY_REVISION_ID
    importing
      !IV_ID type STRING
    returning
      value(RO_REVISION) type ref to ZCL_PHABRICATOR_REVISION .
  methods GET_ID
    returning
      value(RV_ID) type STRING .</publicSection>
  <protectedSection>protected section.</protectedSection>
  <privateSection>private section.

  data ID type STRING .
  data PHID type STRING .
  data STATUS type STRING .
  data TITLE type STRING .
  data URI type STRING .

  class-methods GET_REVISION_BY_TASK_AND_STATU
    importing
      !IV_TASK type TRKORR
      !IV_STATUS type STRING
    returning
      value(RS_REVISION) type ZPHABRICATOR_QUERY .
  class-methods SEARCH_RESULT_FOR_REVISION
    importing
      !IV_TASK type TRKORR
      !IT_REVISIONS type ZTTYPHABRICATOR_QUERY
    returning
      value(RS_REVISION) type ZPHABRICATOR_QUERY .
  methods CONSTRUCTOR
    importing
      !IV_ID type STRING
      !IV_PHID type STRING
      !IV_TITLE type STRING
      !IV_URI type STRING
      !IV_STATUS type STRING .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_PHABRICATOR_REVISION" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="PHID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="STATUS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="TITLE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="URI" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="CLOSE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLOSE.
    DATA: lo_url TYPE REF TO zcl_url.

    CREATE OBJECT lo_url
      EXPORTING
        iv_baseurl = zcl_phabricator_authentication=&gt;phabricator_url.

    lo_url-&gt;add_method( &apos;differential.close?&apos; ).

    lo_url-&gt;add_parameter( iv_key = &apos;params[revisionID]&apos; iv_value = id ).
    zcl_phabricator_conduit=&gt;execute_method( EXPORTING io_url = lo_url ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="CONSTRUCTOR" SCONAME="IV_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="CONSTRUCTOR" SCONAME="IV_PHID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="CONSTRUCTOR" SCONAME="IV_TITLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="CONSTRUCTOR" SCONAME="IV_URI" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="CONSTRUCTOR" SCONAME="IV_STATUS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method CONSTRUCTOR.
    id = iv_id.
    phid = iv_phid.
    title = iv_title.
    uri = iv_uri.
    status = iv_status.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_BY_REVISION_ID" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_BY_REVISION_ID" SCONAME="IV_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_BY_REVISION_ID" SCONAME="RO_REVISION" VERSION="1" LANGU="E" DESCRIPT="Phabricator Revision" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_REVISION"/>
   <source>method GET_BY_REVISION_ID.
    DATA: lv_id_string TYPE string,
          lv_message_string TYPE string,
          lt_revisions TYPE zttyphabricator_query,
          lo_url TYPE REF TO zcl_url,
          lv_json_response TYPE string.

    FIELD-SYMBOLS: &lt;revision&gt; TYPE zphabricator_query.

    CREATE OBJECT lo_url
      EXPORTING
        iv_baseurl = zcl_phabricator_authentication=&gt;phabricator_url.

    lo_url-&gt;add_method( &apos;differential.query?&apos; ).

    CONCATENATE &apos;[&quot;&apos; iv_id &apos;&quot;]&apos; INTO lv_id_string.
    lo_url-&gt;add_parameter( iv_key = &apos;params[ids]&apos; iv_value = lv_id_string iv_no_quotes = abap_true ).

    zcl_phabricator_conduit=&gt;execute_method( EXPORTING io_url = lo_url CHANGING result = lt_revisions ).

    READ TABLE lt_revisions INDEX 1 ASSIGNING &lt;revision&gt;.
    IF sy-subrc NE 0.
      CONCATENATE &apos;No revision has been created with this id: &apos; iv_id INTO lv_message_string.
      MESSAGE lv_message_string TYPE &apos;E&apos;.
    ENDIF.

    CREATE OBJECT ro_revision
      EXPORTING
        iv_id     = &lt;revision&gt;-id
        iv_phid   = &lt;revision&gt;-phid
        iv_status = &lt;revision&gt;-status
        iv_title  = &lt;revision&gt;-title
        iv_uri    = &lt;revision&gt;-uri.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_BY_TRANSPORT_TASK" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_BY_TRANSPORT_TASK" SCONAME="IV_TASK" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_BY_TRANSPORT_TASK" SCONAME="RO_REVISION" VERSION="1" LANGU="E" DESCRIPT="Phabricator Revision" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_REVISION"/>
   <source>method GET_BY_TRANSPORT_TASK.
    DATA: ls_revision TYPE zphabricator_query,
          lv_message_string TYPE string.

    ls_revision = get_revision_by_task_and_statu( iv_task = iv_task  iv_status = &apos;status-open&apos; ).
    if ls_revision is INITIAL.
      ls_revision = get_revision_by_task_and_statu( iv_task = iv_task  iv_status = &apos;status-accepted&apos; ).
    endif.

    CHECK ls_revision IS NOT INITIAL.

    CREATE OBJECT ro_revision
      EXPORTING
        iv_id     = ls_revision-id
        iv_phid   = ls_revision-phid
        iv_status = ls_revision-status
        iv_title  = ls_revision-title
        iv_uri    = ls_revision-uri.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_ID" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_ID" SCONAME="RV_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_ID.
    rv_id = id.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_REVISION_BY_TASK_AND_STATU" VERSION="1" LANGU="E" DESCRIPT="Revision by task and status" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_REVISION_BY_TASK_AND_STATU" SCONAME="IV_TASK" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_REVISION_BY_TASK_AND_STATU" SCONAME="IV_STATUS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_REVISION_BY_TASK_AND_STATU" SCONAME="RS_REVISION" VERSION="1" LANGU="E" DESCRIPT="Results" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZPHABRICATOR_QUERY"/>
   <source>method GET_REVISION_BY_TASK_AND_STATU.
    DATA: lt_revisions TYPE zttyphabricator_query,
          lo_url TYPE REF TO zcl_url,
          lv_json_response TYPE string.

    FIELD-SYMBOLS: &lt;revision&gt; TYPE zphabricator_query.

    CREATE OBJECT lo_url
      EXPORTING
        iv_baseurl = zcl_phabricator_authentication=&gt;phabricator_url.

    lo_url-&gt;add_method( &apos;differential.query?&apos; ).
    lo_url-&gt;add_parameter( iv_key = &apos;params[status]&apos; iv_value = iv_status ).
    zcl_phabricator_conduit=&gt;execute_method( EXPORTING io_url = lo_url CHANGING result = lt_revisions ).

    rs_revision = search_result_for_revision( iv_task = iv_task it_revisions = lt_revisions ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_URL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="GET_URL" SCONAME="RV_URL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_URL.
    rv_url = uri.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="IS_ACCEPTED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="IS_ACCEPTED" SCONAME="RV_FLAG" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method IS_ACCEPTED.
    DATA: lv_message TYPE string.

    IF status EQ &apos;2&apos;.
      rv_flag = abap_true.
    ELSE.
      CONCATENATE &apos;Revision is not yet approved: &apos; uri INTO lv_message RESPECTING BLANKS.
      MESSAGE lv_message TYPE &apos;E&apos;.
    ENDIF.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="SEARCH_RESULT_FOR_REVISION" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="SEARCH_RESULT_FOR_REVISION" SCONAME="IV_TASK" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="SEARCH_RESULT_FOR_REVISION" SCONAME="IT_REVISIONS" VERSION="1" LANGU="E" DESCRIPT="ZPHABRICATOR_QUERY" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTTYPHABRICATOR_QUERY"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_REVISION" CMPNAME="SEARCH_RESULT_FOR_REVISION" SCONAME="RS_REVISION" VERSION="1" LANGU="E" DESCRIPT="Results" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZPHABRICATOR_QUERY"/>
   <source>method SEARCH_RESULT_FOR_REVISION.
    DATA: lv_task_string TYPE string,
          lt_revisions TYPE zttyphabricator_query.

    FIELD-SYMBOLS: &lt;revision&gt; TYPE zphabricator_query.

    lt_revisions = it_revisions.

    lv_task_string = iv_task.
    CONDENSE lv_task_string NO-GAPS.

    LOOP AT lt_revisions ASSIGNING &lt;revision&gt;.
      TRANSLATE &lt;revision&gt;-title TO UPPER CASE.           &quot;#EC SYNTCHAR
      CONDENSE &lt;revision&gt;-title NO-GAPS.
      IF &lt;revision&gt;-title EQ lv_task_string.
        rs_revision = &lt;revision&gt;.
        RETURN.
      ENDIF.
    ENDLOOP.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_PHABRICATOR_DIFF" VERSION="1" LANGU="E" DESCRIPT="Phabricator Diff" UUID="000C29E6E17A1EE49DA4E0F21C6C28E6" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZCL_PHABRICATOR_DIFF definition
  public
  final
  create private .

*&quot;* public components of class ZCL_PHABRICATOR_DIFF
*&quot;* do not include other source files here!!!
public section.
  type-pools ABAP .
  type-pools SVRS2 .

  methods GET_ID
    returning
      value(RV_ID) type STRING .
  class-methods CREATE_FROM_TRANSPORT_TASK
    importing
      !IV_DESTINATION type RFCDES-RFCDEST optional
      !IV_TASK type TRKORR
    returning
      value(RO_DIFF) type ref to ZCL_PHABRICATOR_DIFF .</publicSection>
  <protectedSection>protected section.</protectedSection>
  <privateSection>private section.

  data ID type STRING .

  class-methods CREATE_FROM_SAP_DIFF
    importing
      !IT_DIFF type ABAPTXT255_TAB
    returning
      value(RO_DIFF) type ref to ZCL_PHABRICATOR_DIFF .
  class-methods PREP_DIFF_STRING
    importing
      !IT_DIFF type ABAPTXT255_TAB
    returning
      value(RV_DIFF) type STRING .
  methods CONSTRUCTOR
    importing
      !IV_DIFF_ID type STRING .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_PHABRICATOR_DIFF" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZCL_PHABRICATOR_DIFF" TYPEGROUP="SVRS2" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SVRS2</forwardDeclaration>
  <attribute CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CONSTRUCTOR" SCONAME="IV_DIFF_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method CONSTRUCTOR.
    id = iv_diff_id.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CREATE_FROM_SAP_DIFF" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CREATE_FROM_SAP_DIFF" SCONAME="IT_DIFF" VERSION="1" LANGU="E" DESCRIPT="Text Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAPTXT255_TAB"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CREATE_FROM_SAP_DIFF" SCONAME="RO_DIFF" VERSION="1" LANGU="E" DESCRIPT="Phabricator Diff" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_DIFF"/>
   <source>method CREATE_FROM_SAP_DIFF.
    DATA: lo_url TYPE REF TO zcl_url,
          lv_diff_string TYPE string,
          ls_diff TYPE zstr_phabricator_diff_res.

    CREATE OBJECT lo_url
      EXPORTING
        iv_baseurl = zcl_phabricator_authentication=&gt;phabricator_url.

    lo_url-&gt;add_method( &apos;differential.createrawdiff?&apos; ).

    lv_diff_string = prep_diff_string( it_diff ).
    lo_url-&gt;add_parameter( iv_key = &apos;params[diff]&apos; iv_value = lv_diff_string iv_no_condense = abap_true iv_no_quotes = abap_true ).

    zcl_phabricator_conduit=&gt;execute_method( EXPORTING io_url = lo_url CHANGING result = ls_diff ).

    IF ls_diff-id IS INITIAL.
      MESSAGE &apos;Could not create Phabricator diff&apos; TYPE &apos;E&apos;.
    ENDIF.

    CREATE OBJECT ro_diff EXPORTING iv_diff_id = ls_diff-id.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CREATE_FROM_TRANSPORT_TASK" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CREATE_FROM_TRANSPORT_TASK" SCONAME="IV_DESTINATION" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RFCDES-RFCDEST" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CREATE_FROM_TRANSPORT_TASK" SCONAME="IV_TASK" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="CREATE_FROM_TRANSPORT_TASK" SCONAME="RO_DIFF" VERSION="1" LANGU="E" DESCRIPT="Phabricator Diff" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_DIFF"/>
   <source>method CREATE_FROM_TRANSPORT_TASK.

    DATA: lt_objects TYPE STANDARD TABLE OF e071,
          lt_vrso  TYPE STANDARD TABLE OF vrso,
          lt_vrso_tmp  TYPE STANDARD TABLE OF vrso,
          lv_ddobjname TYPE ddobjname,
          ls_header TYPE dd02v,
          ls_object1 TYPE svrs2_versionable_object,
          ls_object2 TYPE svrs2_versionable_object,
          ls_versobj TYPE versobj,
          lo_typedesc TYPE REF TO cl_abap_structdescr,
          lt_components TYPE abap_component_tab,
          lo_unified_diff TYPE REF TO zcl_unified_diff,
          lt_diff_temp TYPE abaptxt255_tab,
          lt_unified_diff TYPE abaptxt255_tab.

    FIELD-SYMBOLS: &lt;object&gt; TYPE e071,
                   &lt;vrso&gt; TYPE vrso,
                   &lt;result&gt; TYPE zstr_abaptext,
                   &lt;any&gt; TYPE data,
                   &lt;abaptext&gt; TYPE abaptxt255_tab,
                   &lt;msg&gt; TYPE abaptxt255.

    CALL FUNCTION &apos;COMP_REPOS_GET_REQOBJ&apos;
      EXPORTING
        iv_trkorr = iv_task
      TABLES
        et_obj    = lt_objects
      EXCEPTIONS
        OTHERS    = 2.
    IF sy-subrc &lt;&gt;    0.
      WRITE: / &apos;Transport does&apos;&apos;&apos;&apos;t exist dummy&apos;.
    ENDIF.

*    APPEND INITIAL LINE TO lt_unified_diff ASSIGNING &lt;result&gt;.
*    &lt;result&gt;-objname = &apos;ObjectsInTransportTask&apos;.
*    APPEND INITIAL LINE TO &lt;result&gt;-abaptext ASSIGNING &lt;msg&gt;.
*    &lt;msg&gt; = &apos;Objects included in transport task.&apos;.
*    LOOP AT lt_objects ASSIGNING &lt;object&gt;.
*      APPEND INITIAL LINE TO &lt;result&gt;-abaptext ASSIGNING &lt;msg&gt;.
*      CONCATENATE &lt;object&gt;-object &lt;object&gt;-obj_name INTO &lt;msg&gt; SEPARATED BY space.
*    ENDLOOP.

*&amp; no AVAS. no text/docu.
    DELETE  lt_objects WHERE object = &apos;DOCU&apos; OR object = &apos;COMM&apos;
            OR object = &apos;AVAS&apos; OR object = &apos;MESS&apos;
            OR object = &apos;MSAD&apos; OR object = &apos;MSAG&apos;.

    LOOP AT lt_objects ASSIGNING &lt;object&gt; .
* Is object versionable?
      SELECT SINGLE *                                       &quot;#EC *
        FROM  versobj
        INTO ls_versobj
        WHERE object = &lt;object&gt;-object.
      IF sy-subrc = 0 OR &lt;object&gt;-object = &apos;TOBJ&apos;.
*&amp; object is versionable or object has no  version. we know the structure,comparable.
        APPEND INITIAL LINE TO lt_vrso ASSIGNING &lt;vrso&gt;.
        &lt;vrso&gt;-objtype = &lt;object&gt;-object .
        &lt;vrso&gt;-objname = &lt;object&gt;-obj_name .
      ELSE.
*&amp; complex object: get its subobjects list.
        CALL FUNCTION &apos;SVRS_RESOLVE_E071_OBJ&apos;
          EXPORTING
            e071_obj        = &lt;object&gt;
          TABLES
            obj_tab         = lt_vrso_tmp
          EXCEPTIONS
            not_versionable = 1
            OTHERS          = 2.
        IF sy-subrc = 0.
          IF &lt;object&gt;-object = &apos;TABL&apos; .
*&amp; TABL may be structure , no TABT ,check type .
            lv_ddobjname = &lt;object&gt;-obj_name.
            CALL FUNCTION &apos;DDIF_TABL_GET&apos;
              EXPORTING
                name     = lv_ddobjname
              IMPORTING
                dd02v_wa = ls_header.
            IF ls_header-tabclass = &apos;INTTAB&apos; OR ls_header-tabclass = &apos;APPEND&apos;. &quot;&amp; structure,no TABT
              DELETE  lt_vrso_tmp WHERE objtype = &apos;TABT&apos; .
            ENDIF.
            APPEND LINES OF lt_vrso_tmp TO lt_vrso.
          ELSE.
            APPEND LINES OF lt_vrso_tmp TO lt_vrso.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

    SORT lt_vrso.
    DELETE ADJACENT DUPLICATES FROM lt_vrso.

    LOOP AT lt_vrso ASSIGNING &lt;vrso&gt;.
      CLEAR ls_object1.

      IF &lt;vrso&gt;-objtype EQ &apos;TOBJ&apos;.
        CONTINUE.
      ENDIF.

      ls_object1-objtype     =  &lt;vrso&gt;-objtype.
      ls_object1-objname     =  &lt;vrso&gt;-objname.
      ls_object1-versno      =  &apos;00000&apos;.
      ls_object1-destination =  space.

      CALL FUNCTION &apos;SVRS_GET_VERSION&apos;
        CHANGING
          object              = ls_object1
        EXCEPTIONS
          communication_error = 1
          system_error        = 2
          no_version          = 3
          version_unreadable  = 4
          OTHERS              = 5.
      IF sy-subrc NE 0.
        CONTINUE.
      ENDIF.

      ASSIGN COMPONENT &lt;vrso&gt;-objtype OF STRUCTURE ls_object1 TO &lt;any&gt;.
      lo_typedesc ?= cl_abap_structdescr=&gt;describe_by_data( &lt;any&gt; ).
      lt_components = lo_typedesc-&gt;get_components( ).

      READ TABLE lt_components WITH KEY name = &apos;ABAPTEXT&apos; TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        CONTINUE.
      ENDIF.

      &quot; Get the object as it is in the target destination
      CLEAR ls_object2.
      ls_object2-objtype     =  &lt;vrso&gt;-objtype.
      ls_object2-objname     =  &lt;vrso&gt;-objname   .
      ls_object2-versno      =  &apos;00000&apos;.

******************************************************************************
* FOR TESTING PURPOSES ONLY!!!!!!!!
*      ls_object2-destination = iv_destination.
******************************************************************************

      CALL FUNCTION &apos;SVRS_GET_VERSION&apos;
        CHANGING
          object              = ls_object2
        EXCEPTIONS
          communication_error = 0
          system_error        = 0
          no_version          = 0
          version_unreadable  = 0
          OTHERS              = 0.


******************************************************************************
* FOR TESTING PURPOSES ONLY!!!!!!!!
      ASSIGN COMPONENT &lt;vrso&gt;-objtype OF STRUCTURE ls_object2 TO &lt;any&gt;.
      ASSIGN COMPONENT &apos;ABAPTEXT&apos; OF STRUCTURE &lt;any&gt; TO &lt;any&gt;.
      CLEAR &lt;any&gt;.
******************************************************************************


      CREATE OBJECT lo_unified_diff
        EXPORTING
          is_new = ls_object1
          is_old = ls_object2.

      lt_diff_temp = lo_unified_diff-&gt;build_unified_diff( ).
      APPEND LINES OF lt_diff_temp TO lt_unified_diff.
    ENDLOOP.

    ro_diff = zcl_phabricator_diff=&gt;create_from_sap_diff( it_diff = lt_unified_diff ).

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="GET_ID" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="GET_ID" SCONAME="RV_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_ID.
    rv_id = id.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="PREP_DIFF_STRING" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="PREP_DIFF_STRING" SCONAME="IT_DIFF" VERSION="1" LANGU="E" DESCRIPT="Text Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAPTXT255_TAB"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_DIFF" CMPNAME="PREP_DIFF_STRING" SCONAME="RV_DIFF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method PREP_DIFF_STRING.
    FIELD-SYMBOLS: &lt;line&gt; TYPE abaptxt255.

    LOOP AT it_diff ASSIGNING &lt;line&gt;.
      CONCATENATE rv_diff &lt;line&gt; cl_abap_char_utilities=&gt;newline INTO rv_diff.
    ENDLOOP.
    rv_diff = zcl_json_handler=&gt;abap2json( abap_data = rv_diff ).
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_PHABRICATOR_CONDUIT" VERSION="1" LANGU="E" DESCRIPT="Conduit" UUID="000C29E6E17A1EE49DA5188F22B2E8E6" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZCL_PHABRICATOR_CONDUIT definition
  public
  final
  create public .

public section.
  type-pools ABAP .

  class-methods EXECUTE_METHOD
    importing
      !IO_URL type ref to ZCL_URL
    changing
      !RESULT type ANY optional .</publicSection>
  <protectedSection>PROTECTED SECTION.</protectedSection>
  <privateSection>private section.

  class-methods GET_JSON_RESPONSE_FROM_SERVICE
    importing
      !IO_URL type ref to ZCL_URL
    returning
      value(RV_RESPONSE) type STRING .
  class-methods BUILD_ABAP_RESULT_STRUCTURE
    importing
      !IV_JSON type STRING
    changing
      !CV_ABAP_DATA type ANY .</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_PHABRICATOR_CONDUIT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <method CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="BUILD_ABAP_RESULT_STRUCTURE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="BUILD_ABAP_RESULT_STRUCTURE" SCONAME="IV_JSON" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="BUILD_ABAP_RESULT_STRUCTURE" SCONAME="CV_ABAP_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>method BUILD_ABAP_RESULT_STRUCTURE.
    DATA: js_obj TYPE REF TO cl_java_script.
    TRY.
        zcl_json_handler=&gt;json2abap( EXPORTING json_string = iv_json CHANGING js_object = js_obj ).
        zcl_json_handler=&gt;json2abap( EXPORTING var_name = &apos;result&apos; CHANGING abap_data = cv_abap_data js_object = js_obj ).
      CATCH zcx_json.
        CLEAR cv_abap_data.
    ENDTRY.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="EXECUTE_METHOD" VERSION="1" LANGU="E" DESCRIPT="Execute a conduit method" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="EXECUTE_METHOD" SCONAME="IO_URL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_URL"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="EXECUTE_METHOD" SCONAME="RESULT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>method EXECUTE_METHOD.
    DATA: lv_json TYPE string.
    lv_json = get_json_response_from_service( io_url = io_url ).
    build_abap_result_structure( EXPORTING iv_json = lv_json CHANGING cv_abap_data = result ).
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="GET_JSON_RESPONSE_FROM_SERVICE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="GET_JSON_RESPONSE_FROM_SERVICE" SCONAME="IO_URL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_URL"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_CONDUIT" CMPNAME="GET_JSON_RESPONSE_FROM_SERVICE" SCONAME="RV_RESPONSE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_JSON_RESPONSE_FROM_SERVICE.
    DATA: lo_authentication TYPE REF TO zcl_phabricator_authentication,
          lo_client TYPE REF TO if_http_client,
          lv_bin TYPE xstring,
          lo_conv TYPE REF TO cl_abap_conv_in_ce,
          lv_url TYPE string,
          lv_authentication TYPE string.

    lo_authentication = zcl_phabricator_authentication=&gt;instance( ).

    IF lo_authentication-&gt;is_authenticated( ) EQ abap_true.
      lv_authentication = lo_authentication-&gt;get_authentication_string( ).
      io_url-&gt;add_parameter( iv_key = &apos;params[__conduit__]&apos; iv_value = lv_authentication iv_no_quotes = abap_true ).
    ENDIF.

    io_url-&gt;add_parameter( iv_key = &apos;output&apos; iv_value = &apos;json&apos; ).
    lv_url = io_url-&gt;get_url( ).

    CALL METHOD cl_http_client=&gt;create_by_url
      EXPORTING
        url                = lv_url
      IMPORTING
        client             = lo_client
      EXCEPTIONS
        argument_not_found = 1
        plugin_not_active  = 2
        internal_error     = 3
        OTHERS             = 4.

    CALL METHOD lo_client-&gt;send
      EXCEPTIONS
        http_communication_failure = 1
        http_invalid_state         = 2.

    CALL METHOD lo_client-&gt;receive
      EXCEPTIONS
        http_communication_failure = 1
        http_invalid_state         = 2
        http_processing_failed     = 3.

    lv_bin = lo_client-&gt;response-&gt;get_data( ).
    lo_conv = cl_abap_conv_in_ce=&gt;create( input = lv_bin ).
    lo_conv-&gt;read( IMPORTING data = rv_response ).
    lo_client-&gt;close( ).
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" VERSION="1" LANGU="E" DESCRIPT="Phabricator" UUID="000C29E6E17A1EE49DA50E81A6FEA8E6" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZCL_PHABRICATOR_AUTHENTICATION definition
  public
  final
  create private .

*&quot;* public components of class ZCL_PHABRICATOR_AUTHENTICATION
*&quot;* do not include other source files here!!!
public section.
  type-pools ABAP .

  constants PHABRICATOR_URL type STRING value &apos;http://phabricator.fcc.ca/api/&apos;. &quot;#EC NOTEXT

  methods IS_AUTHENTICATED
    returning
      value(RV_FLAG) type FLAG .
  methods GET_AUTHENTICATION_STRING
    returning
      value(RV_AUTH) type STRING .
  class-methods INSTANCE
    returning
      value(RO_PHABRICATOR) type ref to ZCL_PHABRICATOR_AUTHENTICATION .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_PHABRICATOR_AUTHENTICATION
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>private section.

  data USER type STRING .                     . &quot; .
  class-data _INSTANCE type ref to ZCL_PHABRICATOR_AUTHENTICATION .
  data CONNECTION_ID type STRING .
  data CERTIFICATE type STRING .
  data SESSION_KEY type STRING .

  methods GET_AUTHENTICATION_DETAILS .
  methods GET_AUTHSIGNATURE
    importing
      !IV_AUTHTOKEN type STRING
    returning
      value(RV_HASH) type STRING .
  methods GET_AUTHTOKEN
    importing
      !IV_DATE type SY-DATUM default SY-DATUM
      !IV_TIME type SY-UZEIT default SY-UZEIT
    returning
      value(RV_TIMESTAMP) type STRING .
  methods CONSTRUCTOR
    importing
      !IS_USER type ZPHABRICATOR .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>CLASS abap_unit_testclass DEFINITION DEFERRED.
CLASS zcl_phabricator_authentication DEFINITION LOCAL FRIENDS abap_unit_testclass.
* ----------------------------------------------------------------------
CLASS abap_unit_testclass DEFINITION FOR TESTING   &quot;#AU Duration Medium
   &quot;#AU Risk_Level Harmless
  INHERITING FROM cl_aunit_assert.
* ----------------------------------------------------------------------
* ===============
  PUBLIC SECTION.
* ===============

* ==================
  PROTECTED SECTION.
* ==================

* ================
  PRIVATE SECTION.
* ================
    DATA:
      m_ref TYPE REF TO zcl_phabricator_authentication.     &quot;#EC NOTEXT

    METHODS: setup.
    METHODS: teardown.
    METHODS: test_timestamp FOR TESTING.

    METHODS: create_revision_from_diff FOR TESTING.
ENDCLASS.       &quot;Abap_Unit_Testclass
* ----------------------------------------------------------------------
CLASS abap_unit_testclass IMPLEMENTATION.
* ----------------------------------------------------------------------

* ----------------------------------------------------------------------
  METHOD setup.
* ----------------------------------------------------------------------
    DATA: ls_phabricator_user TYPE zphabricator.

    CREATE OBJECT m_ref
      EXPORTING
        is_user = ls_phabricator_user.
  ENDMETHOD.       &quot;Setup

* ----------------------------------------------------------------------
  METHOD teardown.
* ----------------------------------------------------------------------


  ENDMETHOD.       &quot;Teardown

  METHOD test_timestamp.
    DATA: lv_timestamp TYPE string.
    lv_timestamp = m_ref-&gt;get_authtoken( iv_date = &apos;20141120&apos; iv_time = &apos;134731&apos; ).
    assert_equals( act = lv_timestamp exp = &apos;1416512851&apos; ).
  ENDMETHOD.                    &quot;test_timestamp


  METHOD create_revision_from_diff.

*    DATA it_diff TYPE abaptxt255_tab.
*
*    APPEND `--- ET4CLNT100ZCL_SCI_EMAIL_FORMATTER=======CCAU  2014-11-12` TO it_diff.
*    APPEND `+++ ZCL_SCI_EMAIL_FORMATTER=======CCAU  2014-11-25` TO it_diff.
*    APPEND `@@ -30,7 +30,7 @@` TO it_diff.
*    APPEND ` * ----------------------------------------------------------------------` TO it_diff.
*    APPEND `   METHOD setup.` TO it_diff.
*    APPEND ` * ----------------------------------------------------------------------` TO it_diff.
*    APPEND `-    DATA iv_inspection TYPE REF TO cl_ci_inspection.` TO it_diff.
*    APPEND `+    DATA iv_inspection TYPE REF TO cl_ci_inspection.        &quot;#EC NEEDED` TO it_diff.
*    APPEND ` ` TO it_diff.
*    APPEND `     CREATE OBJECT m_ref` TO it_diff.
*    APPEND `       EXPORTING` TO it_diff.
*
*    m_ref-&gt;create_revision_from_diff( it_diff ).
  ENDMETHOD.


ENDCLASS.       &quot;Abap_Unit_Testclass</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="CERTIFICATE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="CONNECTION_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="PHABRICATOR_URL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="2" ATTVALUE="&apos;http://phabricator.fcc.ca/api/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="SESSION_KEY" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="USER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Phabricator" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_AUTHENTICATION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="CONSTRUCTOR" SCONAME="IS_USER" VERSION="1" LANGU="E" DESCRIPT="Phabricator Certificates" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZPHABRICATOR"/>
   <source>METHOD constructor.
  certificate = is_user-certificate.
  user = is_user-phab_user.

  TRANSLATE user TO LOWER CASE.
  TRANSLATE certificate TO LOWER CASE.
ENDMETHOD.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHENTICATION_DETAILS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GET_AUTHENTICATION_DETAILS.
    DATA: lv_authtoken TYPE string,
          lv_authsig TYPE string,
          lo_url TYPE REF TO zcl_url,
          lv_json_response TYPE string,
          ls_results TYPE zphabricator_connect_result.

    lv_authtoken = get_authtoken( ).
    lv_authsig = get_authsignature( lv_authtoken ).

    CREATE OBJECT lo_url
      EXPORTING
        iv_baseurl = phabricator_url.

    lo_url-&gt;add_method( &apos;conduit.connect?&apos; ).

    lo_url-&gt;add_parameter( iv_key = &apos;params[client]&apos; iv_value = sy-sysid ).
    lo_url-&gt;add_parameter( iv_key = &apos;params[clientVersion]&apos; iv_value = 1 ).
    lo_url-&gt;add_parameter( iv_key = &apos;params[user]&apos; iv_value = user ).
    lo_url-&gt;add_parameter( iv_key = &apos;params[authToken]&apos; iv_value = lv_authtoken ).
    lo_url-&gt;add_parameter( iv_key = &apos;params[authSignature]&apos; iv_value = lv_authsig ).
    lo_url-&gt;add_parameter( iv_key = &apos;__conduit__&apos; iv_value = &apos;True&apos; ). &quot;#EC NOTEXT

    zcl_phabricator_conduit=&gt;execute_method( EXPORTING io_url = lo_url CHANGING result = ls_results ).
    session_key = ls_results-sessionkey.
    connection_id = ls_results-connectionid.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHENTICATION_STRING" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHENTICATION_STRING" SCONAME="RV_AUTH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_AUTHENTICATION_STRING.
    CONCATENATE &apos;{&quot;sessionKey&quot;:&quot;&apos; session_key &apos;&quot;,&quot;connectionID&quot;:&quot;&apos; connection_id &apos;&quot;}&apos; INTO rv_auth.
    CONDENSE rv_auth NO-GAPS.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHSIGNATURE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHSIGNATURE" SCONAME="IV_AUTHTOKEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHSIGNATURE" SCONAME="RV_HASH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_AUTHSIGNATURE.
    DATA: lv_certificate TYPE string,
          lv_hash TYPE hash160x.
    CONCATENATE iv_authtoken certificate INTO lv_certificate.
    CONDENSE lv_certificate NO-GAPS.

    CALL FUNCTION &apos;CALCULATE_HASH_FOR_CHAR&apos;
      EXPORTING
        data  = lv_certificate
      IMPORTING
        hashx = lv_hash.

    rv_hash = lv_hash.
    TRANSLATE rv_hash TO LOWER CASE.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHTOKEN" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHTOKEN" SCONAME="IV_DATE" VERSION="1" LANGU="E" DESCRIPT="Current Date of Application Server" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-DATUM" PARVALUE="SY-DATUM"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHTOKEN" SCONAME="IV_TIME" VERSION="1" LANGU="E" DESCRIPT="Current Time of Application Server" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-UZEIT" PARVALUE="SY-UZEIT"/>
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="GET_AUTHTOKEN" SCONAME="RV_TIMESTAMP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_AUTHTOKEN.
  DATA: days TYPE i,
        t1 TYPE t VALUE &apos;000000&apos;,
        diff TYPE i,
        unixtimestamp TYPE p LENGTH 16.

  CALL FUNCTION &apos;FIMA_DAYS_AND_MONTHS_AND_YEARS&apos;
    EXPORTING
      i_date_from = &apos;19700101&apos;
      i_date_to   = iv_date
    IMPORTING
      e_days      = days.

  diff = iv_time - t1.
  unixtimestamp = ( days * 86400 ) + ( diff MOD 86400 ) + ( 6 * 3600 ). &quot; +6 hours to accomodate for Saskatchewan timezone
  rv_timestamp = unixtimestamp.
  CONDENSE rv_timestamp NO-GAPS.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="INSTANCE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="INSTANCE" SCONAME="RO_PHABRICATOR" VERSION="1" LANGU="E" DESCRIPT="Phabricator" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PHABRICATOR_AUTHENTICATION"/>
   <source>method INSTANCE.
    DATA: ls_phabricator_user TYPE zphabricator.

    IF _instance IS INITIAL.
      SELECT SINGLE *
        INTO ls_phabricator_user
        FROM zphabricator
        WHERE sap_username = sy-uname.

      IF sy-subrc NE 0.
        MESSAGE &apos;You have not registered your certificate in SAP.&apos; TYPE &apos;I&apos;.
        SUBMIT zphabricator_register AND RETURN.
        ro_phabricator = zcl_phabricator_authentication=&gt;instance( ).
        RETURN.
      ENDIF.

      CREATE OBJECT _instance
        EXPORTING
          is_user = ls_phabricator_user.

      _instance-&gt;get_authentication_details( ).
    ENDIF.

    ro_phabricator = _instance.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="IS_AUTHENTICATED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PHABRICATOR_AUTHENTICATION" CMPNAME="IS_AUTHENTICATED" SCONAME="RV_FLAG" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method IS_AUTHENTICATED.
    IF connection_id IS NOT INITIAL AND session_key IS NOT INITIAL.
      rv_flag = abap_true.
    ENDIF.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IM_CTS_PHABRICATOR_CHK" VERSION="1" LANGU="E" DESCRIPT="Imp. class for BAdI imp. ZCTS_PHABRICATOR_CHK" UUID="54750A0C7E111330E10080000A01314D" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="ZCL_IM_CTS_PHABRICATOR_CHK" REFCLSNAME="IF_EX_CTS_REQUEST_CHECK" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDON="00000000" RELTYPE="1"/>
  <publicSection>class ZCL_IM_CTS_PHABRICATOR_CHK definition
  public
  final
  create public .

*&quot;* public components of class ZCL_IM_CTS_PHABRICATOR_CHK
*&quot;* do not include other source files here!!!
public section.

  interfaces IF_EX_CTS_REQUEST_CHECK .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_IM_CTS_PHABRICATOR_CHK
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_IM_CTS_PHABRICATOR_CHK
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* private components of class ZCL_IM_CTS_PHABRICATOR_CHK
*&quot;* do not include other source files here!!!
private section.</localImplementation>
  <localTypes>*&quot;* private components of class ZCL_IM_CTS_PHABRICATOR_CHK
*&quot;* do not include other source files here!!!
private section.</localTypes>
  <localMacros>*&quot;* private components of class ZCL_IM_CTS_PHABRICATOR_CHK
*&quot;* do not include other source files here!!!
private section.</localMacros>
  <textPool/>
  <classDocumentation/>
  <interfaceMethod CLSNAME="ZCL_IM_CTS_PHABRICATOR_CHK" CPDNAME="IF_EX_CTS_REQUEST_CHECK~CHECK_BEFORE_ADD_OBJECTS">
   <source>method IF_EX_CTS_REQUEST_CHECK~CHECK_BEFORE_ADD_OBJECTS.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IM_CTS_PHABRICATOR_CHK" CPDNAME="IF_EX_CTS_REQUEST_CHECK~CHECK_BEFORE_CHANGING_OWNER">
   <source>method IF_EX_CTS_REQUEST_CHECK~CHECK_BEFORE_CHANGING_OWNER.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IM_CTS_PHABRICATOR_CHK" CPDNAME="IF_EX_CTS_REQUEST_CHECK~CHECK_BEFORE_CREATION">
   <source>method IF_EX_CTS_REQUEST_CHECK~CHECK_BEFORE_CREATION.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IM_CTS_PHABRICATOR_CHK" CPDNAME="IF_EX_CTS_REQUEST_CHECK~CHECK_BEFORE_RELEASE">
   <source>method IF_EX_CTS_REQUEST_CHECK~CHECK_BEFORE_RELEASE.
endmethod.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCL_UNIFIED_DIFF" VERSION="1" LANGU="E" DESCRIPT="Unified Diff" UUID="5474086624831330E10080000A01314D" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZCL_UNIFIED_DIFF definition
  public
  final
  create public .

*&quot;* public components of class ZCL_UNIFIED_DIFF
*&quot;* do not include other source files here!!!
public section.
  type-pools ABAP .

  methods BUILD_UNIFIED_DIFF
    returning
      value(RT_DIFF) type ABAPTXT255_TAB .
  type-pools SVRS2 .
  methods CONSTRUCTOR
    importing
      !IS_OLD type SVRS2_VERSIONABLE_OBJECT
      !IS_NEW type SVRS2_VERSIONABLE_OBJECT .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_UNIFIED_DIFF
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_UNIFIED_DIFF
*&quot;* do not include other source files here!!!
private section.

  data OLD type SVRS2_VERSIONABLE_OBJECT .
  data NEW type SVRS2_VERSIONABLE_OBJECT .
  data DELTA type SVRS2_XVERSIONABLE_OBJECT .
  data DIFF type ABAPTXT255_TAB .
  data HUNK type LTY_HUNK .
  data INSERTED_LINES type I value 0. &quot;#EC NOTEXT .  . &quot; .

  methods END_HUNK .
  methods MAKE_DELTA .
  methods NEW_HUNK
    importing
      !IS_DELTA type VXABAPT255 .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature

  TYPES: ltty_vxabapt255 TYPE STANDARD TABLE OF vxabapt255,
         ltty_trdir TYPE STANDARD TABLE OF trdir,
         BEGIN OF lty_hunk,
           old_start_line TYPE string,
           old_length TYPE string,
           new_start_line TYPE string,
           new_length TYPE string,
           abaptext TYPE abaptxt255_tab,
         END OF lty_hunk.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>CLASS abap_unit_testclass DEFINITION DEFERRED.
CLASS zcl_unified_diff DEFINITION LOCAL FRIENDS abap_unit_testclass.
* ----------------------------------------------------------------------
CLASS abap_unit_testclass DEFINITION FOR TESTING  &quot;#AU Duration Medium
  &quot;#AU Risk_Level Harmless
  INHERITING FROM cl_aunit_assert.
* ----------------------------------------------------------------------
* ===============
  PUBLIC SECTION.
* ===============

* ==================
  PROTECTED SECTION.
* ==================

* ================
  PRIVATE SECTION.
* ================
    DATA:
      m_ref TYPE REF TO zcl_unified_diff.                   &quot;#EC NOTEXT

    METHODS: build_unified_diff FOR TESTING,
             test_a_more_complicated_diff FOR TESTING.
ENDCLASS.       &quot;Abap_Unit_Testclass
* ----------------------------------------------------------------------
CLASS abap_unit_testclass IMPLEMENTATION.


* ----------------------------------------------------------------------
  METHOD build_unified_diff.
* ----------------------------------------------------------------------
    DATA: lt_diff TYPE abaptxt255_tab,
          lt_expected_diff TYPE abaptxt255_tab,
          ls_old TYPE svrs2_versionable_object,
          ls_new TYPE svrs2_versionable_object.

    FIELD-SYMBOLS: &lt;trdir&gt; TYPE trdir.

*******************************************************************************************************************
* The OLD code
*******************************************************************************************************************
    ls_old-objtype = &apos;CINC&apos;.
    ls_old-objname = &apos;ZCL_SCI_EMAIL_FORMATTER=======CCAU&apos;.
    ls_old-versno = &apos;00000&apos;.
    ls_old-destination = &apos;ET4CLNT100&apos;.
    APPEND INITIAL LINE TO ls_old-cinc-trdir ASSIGNING &lt;trdir&gt;.
    &lt;trdir&gt;-udat = &apos;20141112&apos;.

    APPEND `CLASS abap_unit_testclass DEFINITION DEFERRED.` TO ls_old-cinc-abaptext.
    APPEND `CLASS zcl_sci_email_formatter DEFINITION LOCAL FRIENDS abap_unit_testclass.` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `CLASS abap_unit_testclass DEFINITION FOR TESTING  &quot;#AU Duration Medium` TO ls_old-cinc-abaptext.
    APPEND `  &quot;#AU Risk_Level Harmless` TO ls_old-cinc-abaptext.
    APPEND `  INHERITING FROM cl_aunit_assert.` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `* ===============` TO ls_old-cinc-abaptext.
    APPEND `  PUBLIC SECTION.` TO ls_old-cinc-abaptext.
    APPEND `* ===============` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `* ==================` TO ls_old-cinc-abaptext.
    APPEND `  PROTECTED SECTION.` TO ls_old-cinc-abaptext.
    APPEND `* ==================` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `* ================` TO ls_old-cinc-abaptext.
    APPEND `  PRIVATE SECTION.` TO ls_old-cinc-abaptext.
    APPEND `* ================` TO ls_old-cinc-abaptext.
    APPEND `    DATA:` TO ls_old-cinc-abaptext.
    APPEND `      m_ref TYPE REF TO zcl_sci_email_formatter.            &quot;#EC NOTEXT` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `    METHODS: setup.` TO ls_old-cinc-abaptext.
    APPEND `    METHODS: teardown.` TO ls_old-cinc-abaptext.
    APPEND `    METHODS: ignore_warnings FOR TESTING.` TO ls_old-cinc-abaptext.
    APPEND `ENDCLASS.       &quot;Abap_Unit_Testclass` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `CLASS abap_unit_testclass IMPLEMENTATION.` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `  METHOD setup.` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `    DATA iv_inspection TYPE REF TO cl_ci_inspection.` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `    CREATE OBJECT m_ref` TO ls_old-cinc-abaptext.
    APPEND `      EXPORTING` TO ls_old-cinc-abaptext.
    APPEND `        iv_inspection = iv_inspection.` TO ls_old-cinc-abaptext.
    APPEND `  ENDMETHOD.       &quot;Setup` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `  METHOD teardown.` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `  ENDMETHOD.       &quot;Teardown` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `  METHOD ignore_warnings.` TO ls_old-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_old-cinc-abaptext.
    APPEND `    FIELD-SYMBOLS: &lt;result&gt; LIKE LINE OF m_ref-&gt;results.` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `    APPEND INITIAL LINE TO m_ref-&gt;results ASSIGNING &lt;result&gt;.` TO ls_old-cinc-abaptext.
    APPEND `    &lt;result&gt;-kind = &apos;W&apos;.` TO ls_old-cinc-abaptext.
    APPEND `    m_ref-&gt;ignore_warnings(  ).` TO ls_old-cinc-abaptext.
    APPEND `      assert_initial( act = m_ref-&gt;results msg = &apos;Did not delete the warning from the results table.&apos; ).` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `    APPEND INITIAL LINE TO m_ref-&gt;results ASSIGNING &lt;result&gt;.` TO ls_old-cinc-abaptext.
    APPEND `    &lt;result&gt;-kind = &apos;S&apos;.` TO ls_old-cinc-abaptext.
    APPEND `    m_ref-&gt;ignore_warnings(  ).` TO ls_old-cinc-abaptext.
    APPEND `    assert_not_initial( act = m_ref-&gt;results msg = &apos;Deleted a success message from the results table.&apos; ).` TO ls_old-cinc-abaptext.
    APPEND `  ENDMETHOD.       &quot;Ignore_Warnings` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `` TO ls_old-cinc-abaptext.
    APPEND `ENDCLASS.       &quot;Abap_Unit_Testclass` TO ls_old-cinc-abaptext.


*******************************************************************************************************************
* The NEW code
*******************************************************************************************************************
    ls_new-objtype = &apos;CINC&apos;.
    ls_new-objname = &apos;ZCL_SCI_EMAIL_FORMATTER=======CCAU&apos;.
    ls_new-versno = &apos;00000&apos;.
    ls_new-destination = &apos;&apos;.
    APPEND INITIAL LINE TO ls_new-cinc-trdir ASSIGNING &lt;trdir&gt;.
    &lt;trdir&gt;-udat = &apos;20141125&apos;.

    APPEND `CLASS abap_unit_testclass DEFINITION DEFERRED.` TO ls_new-cinc-abaptext.
    APPEND `CLASS zcl_sci_email_formatter DEFINITION LOCAL FRIENDS abap_unit_testclass.` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `CLASS abap_unit_testclass DEFINITION FOR TESTING  &quot;#AU Duration Medium` TO ls_new-cinc-abaptext.
    APPEND `  &quot;#AU Risk_Level Harmless` TO ls_new-cinc-abaptext.
    APPEND `  INHERITING FROM cl_aunit_assert.` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `* ===============` TO ls_new-cinc-abaptext.
    APPEND `  PUBLIC SECTION.` TO ls_new-cinc-abaptext.
    APPEND `* ===============` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `* ==================` TO ls_new-cinc-abaptext.
    APPEND `  PROTECTED SECTION.` TO ls_new-cinc-abaptext.
    APPEND `* ==================` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `* ================` TO ls_new-cinc-abaptext.
    APPEND `  PRIVATE SECTION.` TO ls_new-cinc-abaptext.
    APPEND `* ================` TO ls_new-cinc-abaptext.
    APPEND `    DATA:` TO ls_new-cinc-abaptext.
    APPEND `      m_ref TYPE REF TO zcl_sci_email_formatter.            &quot;#EC NOTEXT` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `    METHODS: setup.` TO ls_new-cinc-abaptext.
    APPEND `    METHODS: teardown.` TO ls_new-cinc-abaptext.
    APPEND `    METHODS: ignore_warnings FOR TESTING.` TO ls_new-cinc-abaptext.
    APPEND `ENDCLASS.       &quot;Abap_Unit_Testclass` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `CLASS abap_unit_testclass IMPLEMENTATION.` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `  METHOD setup.` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `    DATA iv_inspection TYPE REF TO cl_ci_inspection.        &quot;#EC NEEDED` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `    CREATE OBJECT m_ref` TO ls_new-cinc-abaptext.
    APPEND `      EXPORTING` TO ls_new-cinc-abaptext.
    APPEND `        iv_inspection = iv_inspection.` TO ls_new-cinc-abaptext.
    APPEND `  ENDMETHOD.       &quot;Setup` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `  METHOD teardown.` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `  ENDMETHOD.       &quot;Teardown` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `  METHOD ignore_warnings.` TO ls_new-cinc-abaptext.
    APPEND `* ----------------------------------------------------------------------` TO ls_new-cinc-abaptext.
    APPEND `    FIELD-SYMBOLS: &lt;result&gt; LIKE LINE OF m_ref-&gt;results.` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `    APPEND INITIAL LINE TO m_ref-&gt;results ASSIGNING &lt;result&gt;.` TO ls_new-cinc-abaptext.
    APPEND `    &lt;result&gt;-kind = &apos;W&apos;.` TO ls_new-cinc-abaptext.
    APPEND `    m_ref-&gt;ignore_warnings(  ).` TO ls_new-cinc-abaptext.
    APPEND `      assert_initial( act = m_ref-&gt;results msg = &apos;Did not delete the warning from the results table.&apos; ).` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `    APPEND INITIAL LINE TO m_ref-&gt;results ASSIGNING &lt;result&gt;.` TO ls_new-cinc-abaptext.
    APPEND `    &lt;result&gt;-kind = &apos;S&apos;.` TO ls_new-cinc-abaptext.
    APPEND `    m_ref-&gt;ignore_warnings(  ).` TO ls_new-cinc-abaptext.
    APPEND `    assert_not_initial( act = m_ref-&gt;results msg = &apos;Deleted a success message from the results table.&apos; ).` TO ls_new-cinc-abaptext.
    APPEND `  ENDMETHOD.       &quot;Ignore_Warnings` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `` TO ls_new-cinc-abaptext.
    APPEND `ENDCLASS.       &quot;Abap_Unit_Testclass` TO ls_new-cinc-abaptext.


    CREATE OBJECT m_ref
      EXPORTING
        is_old = ls_old
        is_new = ls_new.

*******************************************************************************************************************
* The EXPECTED diff
*******************************************************************************************************************
    APPEND `--- ZCL_SCI_EMAIL_FORMATTER=======CCAU  2014-11-12` TO lt_expected_diff.
    APPEND `+++ ZCL_SCI_EMAIL_FORMATTER=======CCAU  2014-11-25` TO lt_expected_diff.
    APPEND `@@ -30,7 +30,7 @@` TO lt_expected_diff.
    APPEND ` * ----------------------------------------------------------------------` TO lt_expected_diff.
    APPEND `   METHOD setup.` TO lt_expected_diff.
    APPEND ` * ----------------------------------------------------------------------` TO lt_expected_diff.
    APPEND `-    DATA iv_inspection TYPE REF TO cl_ci_inspection.` TO lt_expected_diff.
    APPEND `+    DATA iv_inspection TYPE REF TO cl_ci_inspection.        &quot;#EC NEEDED` TO lt_expected_diff.
    APPEND ` ` TO lt_expected_diff.
    APPEND `     CREATE OBJECT m_ref` TO lt_expected_diff.
    APPEND `       EXPORTING` TO lt_expected_diff.

    lt_diff =  m_ref-&gt;build_unified_diff( ).

    assert_equals( act = lt_diff exp = lt_expected_diff ).


  ENDMETHOD.       &quot;Build_Unified_Diff


  METHOD test_a_more_complicated_diff.
    DATA: lt_diff TYPE abaptxt255_tab,
          lt_expected_diff TYPE abaptxt255_tab,
          ls_old TYPE svrs2_versionable_object,
          ls_new TYPE svrs2_versionable_object.

    FIELD-SYMBOLS: &lt;trdir&gt; TYPE trdir.

*******************************************************************************************************************
* The OLD code
*******************************************************************************************************************
    ls_old-objtype = &apos;CINC&apos;.
    ls_old-objname = &apos;/path/to/original&apos;.
    ls_old-versno = &apos;00000&apos;.
    ls_old-destination = &apos;ET4CLNT100&apos;.
    APPEND INITIAL LINE TO ls_old-cinc-trdir ASSIGNING &lt;trdir&gt;.
    &lt;trdir&gt;-udat = &apos;20141112&apos;.

    APPEND `This part of the` TO ls_old-cinc-abaptext.
    APPEND `document has stayed the` TO ls_old-cinc-abaptext.
    APPEND `same from version to` TO ls_old-cinc-abaptext.
    APPEND `version.  It shouldn&apos;t` TO ls_old-cinc-abaptext.
    APPEND `be shown if it doesn&apos;t` TO ls_old-cinc-abaptext.
    APPEND `change.  Otherwise, that` TO ls_old-cinc-abaptext.
    APPEND `would not be helping to` TO ls_old-cinc-abaptext.
    APPEND `compress the size of the` TO ls_old-cinc-abaptext.
    APPEND `changes.` TO ls_old-cinc-abaptext.
    APPEND ` ` TO ls_old-cinc-abaptext.
    APPEND `This paragraph contains` TO ls_old-cinc-abaptext.
    APPEND `text that is outdated.` TO ls_old-cinc-abaptext.
    APPEND `It will be deleted in the` TO ls_old-cinc-abaptext.
    APPEND `near future.` TO ls_old-cinc-abaptext.
    APPEND ` ` TO ls_old-cinc-abaptext.
    APPEND `It is important to spell` TO ls_old-cinc-abaptext.
    APPEND `check this dokument. On` TO ls_old-cinc-abaptext.
    APPEND `the other hand, a` TO ls_old-cinc-abaptext.
    APPEND `misspelled word isn&apos;t` TO ls_old-cinc-abaptext.
    APPEND `the end of the world.` TO ls_old-cinc-abaptext.
    APPEND `Nothing in the rest of` TO ls_old-cinc-abaptext.
    APPEND `this paragraph needs to` TO ls_old-cinc-abaptext.
    APPEND `be changed. Things can` TO ls_old-cinc-abaptext.
    APPEND `be added after it.` TO ls_old-cinc-abaptext.


*******************************************************************************************************************
* The NEW code
*******************************************************************************************************************
    ls_new-objtype = &apos;CINC&apos;.
    ls_new-objname = &apos;/path/to/new&apos;.
    ls_new-versno = &apos;00000&apos;.
    ls_new-destination = &apos;&apos;.
    APPEND INITIAL LINE TO ls_new-cinc-trdir ASSIGNING &lt;trdir&gt;.
    &lt;trdir&gt;-udat = &apos;20141125&apos;.

    APPEND `This is an important` TO ls_new-cinc-abaptext.
    APPEND `notice! It should` TO ls_new-cinc-abaptext.
    APPEND `therefore be located at` TO ls_new-cinc-abaptext.
    APPEND `the beginning of this` TO ls_new-cinc-abaptext.
    APPEND `document!` TO ls_new-cinc-abaptext.
    APPEND ` ` TO ls_new-cinc-abaptext.
    APPEND `This part of the` TO ls_new-cinc-abaptext.
    APPEND `document has stayed the` TO ls_new-cinc-abaptext.
    APPEND `same from version to` TO ls_new-cinc-abaptext.
    APPEND `version.  It shouldn&apos;t` TO ls_new-cinc-abaptext.
    APPEND `be shown if it doesn&apos;t` TO ls_new-cinc-abaptext.
    APPEND `change.  Otherwise, that` TO ls_new-cinc-abaptext.
    APPEND `would not be helping to` TO ls_new-cinc-abaptext.
    APPEND `compress anything.` TO ls_new-cinc-abaptext.
    APPEND ` ` TO ls_new-cinc-abaptext.
    APPEND `It is important to spell` TO ls_new-cinc-abaptext.
    APPEND `check this document. On` TO ls_new-cinc-abaptext.
    APPEND `the other hand, a` TO ls_new-cinc-abaptext.
    APPEND `misspelled word isn&apos;t` TO ls_new-cinc-abaptext.
    APPEND `the end of the world.` TO ls_new-cinc-abaptext.
    APPEND `Nothing in the rest of` TO ls_new-cinc-abaptext.
    APPEND `this paragraph needs to` TO ls_new-cinc-abaptext.
    APPEND `be changed. Things can` TO ls_new-cinc-abaptext.
    APPEND `be added after it.` TO ls_new-cinc-abaptext.
    APPEND ` ` TO ls_new-cinc-abaptext.
    APPEND `This paragraph contains` TO ls_new-cinc-abaptext.
    APPEND `important new additions` TO ls_new-cinc-abaptext.
    APPEND `to this document.` TO ls_new-cinc-abaptext.


    CREATE OBJECT m_ref
      EXPORTING
        is_old = ls_old
        is_new = ls_new.

*******************************************************************************************************************
* The EXPECTED diff
*******************************************************************************************************************
    APPEND `--- /path/to/original  2014-11-12` TO lt_expected_diff.
    APPEND `+++ /path/to/new  2014-11-25` TO lt_expected_diff.
    APPEND `@@ -1,3 +1,9 @@` TO lt_expected_diff.
    APPEND `+This is an important` TO lt_expected_diff.
    APPEND `+notice! It should` TO lt_expected_diff.
    APPEND `+therefore be located at` TO lt_expected_diff.
    APPEND `+the beginning of this` TO lt_expected_diff.
    APPEND `+document!` TO lt_expected_diff.
    APPEND `+` TO lt_expected_diff.
    APPEND ` This part of the` TO lt_expected_diff.
    APPEND ` document has stayed the` TO lt_expected_diff.
    APPEND ` same from version to` TO lt_expected_diff.
    APPEND `@@ -5,16 +11,10 @@` TO lt_expected_diff.
    APPEND ` be shown if it doesn&apos;t` TO lt_expected_diff.
    APPEND ` change.  Otherwise, that` TO lt_expected_diff.
    APPEND ` would not be helping to` TO lt_expected_diff.
    APPEND `-compress the size of the` TO lt_expected_diff.
    APPEND `+compress anything.` TO lt_expected_diff.
    APPEND `-changes.` TO lt_expected_diff.
    APPEND `-` TO lt_expected_diff.
    APPEND `-This paragraph contains` TO lt_expected_diff.
    APPEND `-text that is outdated.` TO lt_expected_diff.
    APPEND `-It will be deleted in the` TO lt_expected_diff.
    APPEND `-near future.` TO lt_expected_diff.
    APPEND ` ` TO lt_expected_diff.
    APPEND ` It is important to spell` TO lt_expected_diff.
    APPEND `-check this dokument. On` TO lt_expected_diff.
    APPEND `+check this document. On` TO lt_expected_diff.
    APPEND ` the other hand, a` TO lt_expected_diff.
    APPEND ` misspelled word isn&apos;t` TO lt_expected_diff.
    APPEND ` the end of the world.` TO lt_expected_diff.
    APPEND `@@ -22,3 +22,7 @@` TO lt_expected_diff.
    APPEND ` this paragraph needs to` TO lt_expected_diff.
    APPEND ` be changed. Things can` TO lt_expected_diff.
    APPEND ` be added after it.` TO lt_expected_diff.
    APPEND `+` TO lt_expected_diff.
    APPEND `+This paragraph contains` TO lt_expected_diff.
    APPEND `+important new additions` TO lt_expected_diff.
    APPEND `+to this document.` TO lt_expected_diff.

    lt_diff =  m_ref-&gt;build_unified_diff( ).

    assert_equals( act = lt_diff exp = lt_expected_diff ).
  ENDMETHOD.                    &quot;test_a_more_complicated_diff

ENDCLASS.       &quot;Abap_Unit_Testclass</localTestClasses>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_UNIFIED_DIFF" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZCL_UNIFIED_DIFF" TYPEGROUP="SVRS2" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SVRS2</forwardDeclaration>
  <attribute CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="DELTA" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SVRS2_XVERSIONABLE_OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="DIFF" VERSION="1" LANGU="E" DESCRIPT="Text Table" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAPTXT255_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="HUNK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LTY_HUNK" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="INSERTED_LINES" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTVALUE="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="NEW" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SVRS2_VERSIONABLE_OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="OLD" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SVRS2_VERSIONABLE_OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="BUILD_UNIFIED_DIFF" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="BUILD_UNIFIED_DIFF" SCONAME="RT_DIFF" VERSION="1" LANGU="E" DESCRIPT="Text Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAPTXT255_TAB"/>
   <source>method BUILD_UNIFIED_DIFF.
    DATA: lv_objectype TYPE string,
          lv_diff TYPE abaptxt255,
          lv_destination TYPE string,
          lv_old_name TYPE string,
          lv_new_name TYPE string,
          ls_hunk TYPE lty_hunk,
          lv_line TYPE i.

    FIELD-SYMBOLS: &lt;obj&gt; TYPE any,
                   &lt;abaptxt_old_tab&gt; TYPE abaptxt255_tab,
                   &lt;abaptxt_old&gt; TYPE abaptxt255,
                   &lt;abaptxt_new_tab&gt; TYPE abaptxt255_tab,
                   &lt;abaptxt_new&gt; TYPE abaptxt255,
                   &lt;delta_txt_tab&gt; TYPE ltty_vxabapt255,
                   &lt;delta_txt&gt; TYPE vxabapt255,
                   &lt;trdir&gt; TYPE ltty_trdir,
                   &lt;trdir_old&gt; TYPE trdir,
                   &lt;trdir_new&gt; TYPE trdir,
                   &lt;txt&gt; TYPE abaptxt255,
                   &lt;line&gt; TYPE abaptxt255.

    make_delta( ).

    lv_objectype = delta-objtype.

    ASSIGN COMPONENT lv_objectype OF STRUCTURE old TO &lt;obj&gt;.
    ASSIGN COMPONENT &apos;ABAPTEXT&apos; OF STRUCTURE &lt;obj&gt; TO &lt;abaptxt_old_tab&gt;.
    ASSIGN COMPONENT &apos;TRDIR&apos; OF STRUCTURE &lt;obj&gt; TO &lt;trdir&gt;.
    READ TABLE &lt;trdir&gt; INDEX 1 ASSIGNING &lt;trdir_old&gt;.

    ASSIGN COMPONENT lv_objectype OF STRUCTURE new TO &lt;obj&gt;.
    ASSIGN COMPONENT &apos;ABAPTEXT&apos; OF STRUCTURE &lt;obj&gt; TO &lt;abaptxt_new_tab&gt;.
    ASSIGN COMPONENT &apos;TRDIR&apos; OF STRUCTURE &lt;obj&gt; TO &lt;trdir&gt;.
    READ TABLE &lt;trdir&gt; INDEX 1 ASSIGNING &lt;trdir_new&gt;.

    ASSIGN COMPONENT lv_objectype OF STRUCTURE delta TO &lt;obj&gt;.
    ASSIGN COMPONENT &apos;ABAPTEXT&apos; OF STRUCTURE &lt;obj&gt; TO &lt;delta_txt_tab&gt;.

    CHECK &lt;delta_txt_tab&gt; IS NOT INITIAL.

    lv_destination = delta-destination_old.
    CONDENSE lv_destination NO-GAPS.
    lv_old_name = delta-objname_old.
    CONDENSE lv_old_name NO-GAPS.
    lv_new_name = delta-objname_new.
    CONDENSE lv_new_name NO-GAPS.

* Build the header that identifies the &apos;files&apos; that were diff&apos;ed
    CONCATENATE &apos;--- &apos; lv_old_name &apos;  &apos; &lt;trdir_old&gt;-udat+0(4) &apos;-&apos; &lt;trdir_old&gt;-udat+4(2) &apos;-&apos; &lt;trdir_old&gt;-udat+6(2) INTO lv_diff RESPECTING BLANKS.
    APPEND lv_diff TO diff.
    CONCATENATE &apos;+++ &apos; lv_new_name &apos;  &apos; &lt;trdir_new&gt;-udat+0(4) &apos;-&apos; &lt;trdir_new&gt;-udat+4(2) &apos;-&apos; &lt;trdir_new&gt;-udat+6(2) INTO lv_diff RESPECTING BLANKS.
    APPEND lv_diff TO diff.

    LOOP AT &lt;delta_txt_tab&gt; ASSIGNING &lt;delta_txt&gt;.
      AT FIRST.
        new_hunk( &lt;delta_txt&gt; ).
      ENDAT.
      DATA: lv_start_of_hunk TYPE i,
            lv_end_of_last_hunk TYPE i.
      lv_start_of_hunk = &lt;delta_txt&gt;-number - 3.
      lv_end_of_last_hunk = hunk-old_start_line + hunk-old_length + 2.
      IF lv_start_of_hunk GT lv_end_of_last_hunk.
        end_hunk( ).
        new_hunk( &lt;delta_txt&gt; ).
      ELSE.
        lv_line = hunk-old_start_line + hunk-old_length.
        WHILE lv_line LT &lt;delta_txt&gt;-number.
          READ TABLE &lt;abaptxt_old_tab&gt; INDEX lv_line ASSIGNING &lt;line&gt;.
          CONCATENATE space &lt;line&gt; INTO &lt;line&gt; RESPECTING BLANKS.
          APPEND &lt;line&gt; TO hunk-abaptext.
          ADD 1 TO hunk-old_length.
          ADD 1 TO hunk-new_length.
          lv_line = hunk-old_start_line + hunk-old_length.
        ENDWHILE.
      ENDIF.


      IF &lt;delta_txt&gt;-vrsflag EQ &apos;I&apos;. &quot;Insert
        CONCATENATE &apos;+&apos; &lt;delta_txt&gt;-line INTO &lt;delta_txt&gt;-line RESPECTING BLANKS.
        APPEND &lt;delta_txt&gt;-line TO hunk-abaptext.
        ADD 1 TO hunk-new_length.
        ADD 1 TO inserted_lines.
      ELSEIF &lt;delta_txt&gt;-vrsflag EQ &apos;U&apos;. &quot;Update
        READ TABLE &lt;abaptxt_old_tab&gt; INDEX &lt;delta_txt&gt;-number ASSIGNING &lt;txt&gt;.
        CONCATENATE &apos;-&apos; &lt;txt&gt; INTO &lt;txt&gt; RESPECTING BLANKS.
        APPEND &lt;txt&gt; TO hunk-abaptext.
        ADD inserted_lines TO &lt;delta_txt&gt;-number.
        READ TABLE &lt;abaptxt_new_tab&gt; INDEX &lt;delta_txt&gt;-number ASSIGNING &lt;txt&gt;.
        CONCATENATE &apos;+&apos; &lt;txt&gt; INTO &lt;txt&gt; RESPECTING BLANKS.
        APPEND &lt;txt&gt; TO hunk-abaptext.
        ADD 1 TO hunk-new_length.
        ADD 1 TO hunk-old_length.
      ELSEIF &lt;delta_txt&gt;-vrsflag EQ &apos;D&apos;. &quot;Delete
        CONCATENATE &apos;-&apos; &lt;delta_txt&gt;-line INTO &lt;delta_txt&gt;-line RESPECTING BLANKS.
        APPEND &lt;delta_txt&gt;-line TO hunk-abaptext.
        ADD 1 TO hunk-old_length.
        SUBTRACT 1 FROM inserted_lines.
      ENDIF.
    ENDLOOP.

    end_hunk( ).
    rt_diff = diff.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="CONSTRUCTOR" SCONAME="IS_OLD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SVRS2_VERSIONABLE_OBJECT"/>
   <parameter CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="CONSTRUCTOR" SCONAME="IS_NEW" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SVRS2_VERSIONABLE_OBJECT"/>
   <source>method CONSTRUCTOR.
  old = is_old.
  new = is_new.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="END_HUNK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <source>method END_HUNK.
    DATA: lv_objectype TYPE string,
          lv_hunk_header TYPE abaptxt255,
          lv_line TYPE i,
          lv_old_start TYPE i,
          lv_old_len TYPE i,
          lv_new_start TYPE i,
          lv_new_len TYPE i.

    FIELD-SYMBOLS: &lt;obj&gt; TYPE any,
                   &lt;abaptxt_old_tab&gt; TYPE abaptxt255_tab,
                   &lt;abaptxt_old&gt; TYPE abaptxt255,
                   &lt;line&gt; TYPE abaptxt255.

    lv_objectype = delta-objtype.

    ASSIGN COMPONENT lv_objectype OF STRUCTURE old TO &lt;obj&gt;.
    ASSIGN COMPONENT &apos;ABAPTEXT&apos; OF STRUCTURE &lt;obj&gt; TO &lt;abaptxt_old_tab&gt;.

    DATA: counter TYPE i VALUE &apos;1&apos;.

    WHILE counter LE 3.
      lv_line = hunk-old_start_line + hunk-old_length.
      READ TABLE &lt;abaptxt_old_tab&gt; INDEX lv_line ASSIGNING &lt;line&gt;.
      IF sy-subrc NE 0.
        EXIT.
      ENDIF.

      CONCATENATE space &lt;line&gt; INTO &lt;line&gt; RESPECTING BLANKS.
      APPEND &lt;line&gt; TO hunk-abaptext.
      ADD 1 TO counter.
      ADD 1 TO hunk-old_length.
      ADD 1 TO hunk-new_length.
    ENDWHILE.

    MOVE hunk-old_start_line TO lv_old_start.
    MOVE hunk-old_length TO lv_old_len.
    MOVE hunk-new_start_line TO lv_new_start.
    MOVE hunk-new_length TO lv_new_len.

    MOVE lv_old_start TO hunk-old_start_line.
    MOVE lv_old_len TO hunk-old_length.
    MOVE lv_new_start TO hunk-new_start_line.
    MOVE lv_new_len TO hunk-new_length.

    CONDENSE hunk-old_start_line NO-GAPS.
    CONDENSE hunk-old_length NO-GAPS.
    CONDENSE hunk-new_start_line NO-GAPS.
    CONDENSE hunk-new_length NO-GAPS.

    CONCATENATE &apos;@@ -&apos; hunk-old_start_line &apos;,&apos; hunk-old_length &apos; +&apos; hunk-new_start_line &apos;,&apos; hunk-new_length &apos; @@&apos; INTO lv_hunk_header RESPECTING BLANKS.
    APPEND lv_hunk_header TO diff.

    APPEND LINES OF hunk-abaptext TO diff.
    CLEAR hunk.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="MAKE_DELTA" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAKE_DELTA.

  CALL FUNCTION &apos;SVRS_MAKE_OBJECT_DELTA&apos;
    EXPORTING
      obj_old              = old
      obj_new              = new
    CHANGING
      delta                = delta
    EXCEPTIONS
      inconsistent_objects = 1
      OTHERS               = 2.
  IF sy-subrc &lt;&gt; 0.
*    APPEND `You fucked up.` TO rt_diff.
  ENDIF.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="NEW_HUNK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_UNIFIED_DIFF" CMPNAME="NEW_HUNK" SCONAME="IS_DELTA" VERSION="1" LANGU="E" DESCRIPT="Version Management: Delta for ABAPTEXT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VXABAPT255"/>
   <source>method NEW_HUNK.
  DATA: lv_objectype TYPE string.

  FIELD-SYMBOLS: &lt;obj&gt; TYPE ANY,
                 &lt;abaptxt_old_tab&gt; TYPE abaptxt255_tab,
                 &lt;abaptxt_old&gt; TYPE abaptxt255.

  lv_objectype = delta-objtype.

  ASSIGN COMPONENT lv_objectype OF STRUCTURE old TO &lt;obj&gt;.
  ASSIGN COMPONENT &apos;ABAPTEXT&apos; OF STRUCTURE &lt;obj&gt; TO &lt;abaptxt_old_tab&gt;.

  hunk-old_start_line = hunk-new_start_line = is_delta-number - 3.
  ADD inserted_lines TO hunk-new_start_line.

  IF hunk-old_start_line LE 0.
    hunk-old_start_line = 1.
  ENDIF.
  IF hunk-new_start_line LE 0.
    hunk-new_start_line = 1.
  ENDIF.

  DATA: lv_line TYPE i.
  FIELD-SYMBOLS: &lt;line&gt; TYPE abaptxt255.

  lv_line = hunk-old_start_line.
  WHILE lv_line LT is_delta-number.
    READ TABLE &lt;abaptxt_old_tab&gt; INDEX lv_line ASSIGNING &lt;line&gt;.
    CONCATENATE space &lt;line&gt; INTO &lt;line&gt; RESPECTING BLANKS.
    APPEND &lt;line&gt; TO hunk-abaptext.
    ADD 1 TO hunk-old_length.
    ADD 1 TO hunk-new_length.
    ADD 1 TO lv_line.
  ENDWHILE.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
  <CLAS CLSNAME="ZCL_URL" VERSION="1" LANGU="E" DESCRIPT="Url builder" UUID="546D1035DE8E23E0E10080000A01314D" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZCL_URL definition
  public
  final
  create public .

*&quot;* public components of class ZCL_URL
*&quot;* do not include other source files here!!!
public section.
  type-pools ABAP .

  methods CONSTRUCTOR
    importing
      !IV_BASEURL type STRING .
  methods ADD_PARAMETER
    importing
      !IV_KEY type STRING
      !IV_VALUE type ANY
      !IV_NO_QUOTES type FLAG optional
      !IV_NO_CONDENSE type FLAG optional .
  methods GET_URL
    returning
      value(RV_URL) type STRING .
  methods ADD_METHOD
    importing
      !IV_METHOD type STRING .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_URL
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_URL
*&quot;* do not include other source files here!!!
private section.

  data URL type STRING .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_URL" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_URL" CMPNAME="URL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_URL" CMPNAME="ADD_METHOD" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_URL" CMPNAME="ADD_METHOD" SCONAME="IV_METHOD" VERSION="1" LANGU="E" DESCRIPT="Method for which report is generated" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141125" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method ADD_METHOD.
  CONCATENATE url iv_method INTO url.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_URL" CMPNAME="ADD_PARAMETER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_URL" CMPNAME="ADD_PARAMETER" SCONAME="IV_KEY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_URL" CMPNAME="ADD_PARAMETER" SCONAME="IV_VALUE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_URL" CMPNAME="ADD_PARAMETER" SCONAME="IV_NO_QUOTES" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141124" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_URL" CMPNAME="ADD_PARAMETER" SCONAME="IV_NO_CONDENSE" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141126" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <source>method ADD_PARAMETER.
    DATA: lv_url_length TYPE i,
          lv_value TYPE string,
          lv_parameter TYPE string.

    lv_url_length = strlen( url ) - 1.

    IF url+lv_url_length(1) NE &apos;?&apos;.
      CONCATENATE url &apos;&amp;&apos; INTO url.
    ENDIF.

    MOVE iv_value TO lv_value.
    IF iv_no_condense IS INITIAL.
      CONDENSE lv_value NO-GAPS.
    ENDIF.

    lv_value = cl_abap_dyn_prg=&gt;escape_xss_url( val = lv_value ).

*    lv_value = escape( val = lv_value format = cl_abap_format=&gt;e_uri_full ).

    IF iv_no_quotes EQ abap_false.
      CONCATENATE url iv_key &apos;=&quot;&apos; lv_value &apos;&quot;&apos; INTO url.
    ELSE.
      CONCATENATE url iv_key &apos;=&apos; lv_value INTO url.
    ENDIF.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_URL" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_URL" CMPNAME="CONSTRUCTOR" SCONAME="IV_BASEURL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method CONSTRUCTOR.
    url = iv_baseurl.
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_URL" CMPNAME="GET_URL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_URL" CMPNAME="GET_URL" SCONAME="RV_URL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20141120" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GET_URL.
    rv_url = url.
endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <PROG NAME="ZPHABRICATOR" VARCL="X" SUBC="1" CNAM="TETREAUL_SAP" CDAT="20141126" UNAM="TETREAUL_SAP" UDAT="20141126" VERN="000016" RMAND="001" RLOAD="E" FIXPT="X" SDATE="20141126" STIME="120149" IDATE="20141126" ITIME="120149" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Program ZPHABRICATOR" LENGTH="20 "/>
    <textElement ID="S" KEY="P_DEST" ENTRY="        Target System RFC:" LENGTH="26 "/>
    <textElement ID="S" KEY="P_SUM" ENTRY="        Summary:" LENGTH="16 "/>
    <textElement ID="S" KEY="P_TASK" ENTRY="        Transport Task:" LENGTH="23 "/>
    <textElement ID="S" KEY="S_REVIEW" ENTRY="        Reviewers:" LENGTH="18 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZPHABRICATOR
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT zphabricator.

PARAMETERS: p_task TYPE trkorr,
            p_dest TYPE rfcdest,
            p_sum TYPE string LOWER CASE.

DATA: lv_reviewer TYPE sy-uname,
      lv_title TYPE string.

SELECT-OPTIONS s_review FOR lv_reviewer NO INTERVALS.


DATA: lo_diff TYPE REF TO zcl_phabricator_diff,
      lo_revision_builder TYPE REF TO zcl_phabricator_revision_blder,
      lo_revision TYPE REF TO zcl_phabricator_revision,
      lv_diff TYPE string,
      lv_reviewer_string TYPE string,
      lo_user TYPE REF TO zcl_phabricator_user.

lo_diff = zcl_phabricator_diff=&gt;create_from_transport_task( iv_destination = p_dest iv_task = p_task ).
lv_diff = lo_diff-&gt;get_id( ).

CREATE OBJECT lo_revision_builder
  EXPORTING
    iv_task = p_task.

lo_revision_builder-&gt;set_diff_id( lv_diff ).
lo_revision_builder-&gt;set_summary( p_sum ).
MOVE p_task TO lv_title.
lo_revision_builder-&gt;set_title( lv_title ).

LOOP AT s_review.
  lv_reviewer_string = s_review-low.
  lo_user = zcl_phabricator_user=&gt;get_by_username( lv_reviewer_string ).
  lo_revision_builder-&gt;add_reviewer( lo_user ).
ENDLOOP.

lo_revision = lo_revision_builder-&gt;commit( ).

DATA: lv_url TYPE string.
lv_url = lo_revision-&gt;get_url( ).
WRITE: / lv_url.</source>
 </PROG>
 <PROG NAME="ZPHABRICATOR_REGISTER" VARCL="X" SUBC="1" CNAM="TETREAUL_SAP" CDAT="20141126" UNAM="TETREAUL_SAP" UDAT="20141126" VERN="000013" RMAND="001" RLOAD="E" FIXPT="X" SDATE="20141126" STIME="120149" IDATE="20141126" ITIME="120149" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Program ZPHABRICATOR_REGISTER" LENGTH="29 "/>
    <textElement ID="S" KEY="P_CERT" ENTRY="        Conduit Certificate:" LENGTH="28 "/>
    <textElement ID="S" KEY="P_USER" ENTRY="        Phabricator Username:" LENGTH="29 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZPHABRICATOR_REGISTER
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT zphabricator_register.

PARAMETERS: p_user TYPE uname,
            p_cert TYPE string.

DATA: ls_phabricator TYPE zphabricator.

ls_phabricator-certificate = p_cert.
ls_phabricator-phab_user = p_user.
ls_phabricator-sap_username = sy-uname.

MODIFY zphabricator FROM ls_phabricator.
IF sy-subrc EQ 0.
  MESSAGE &apos;You are now registered!&apos; TYPE &apos;S&apos;.
ENDIF.</source>
 </PROG>
 <SXCI IMP_NAME="ZCTS_PHABRICATOR_CHK" TEXT="Check Phabricator to see if a task is accepted." IMP_CLASS="ZCL_IM_CTS_PHABRICATOR_CHK" EXIT_NAME="CTS_REQUEST_CHECK" INTER_NAME="IF_EX_CTS_REQUEST_CHECK" UNAME="TETREAUL_SAP" UDATE="20141121" UTIME="103431" ADATE="00000000" ATIME="000000">
  <text SPRSL="E"/>
 </SXCI>
 <TABL TABNAME="ZPHABRICATOR_CREATE_REVISION" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Fields for creating a revision" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115427" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZPHABRICATOR_CREATE_REVISION" FIELDNAME="TITLE" DDLANGUAGE="E" POSITION="0001" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CREATE_REVISION" FIELDNAME="SUMMARY" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CREATE_REVISION" FIELDNAME="REVIEWERPHIDS" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZPHABRICATOR_REVIEWERS" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Reviewers" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZPHABRICATOR_CREATE" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Results of revision create" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZPHABRICATOR_CREATE" FIELDNAME="REVISIONID" DDLANGUAGE="E" POSITION="0001" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CREATE" FIELDNAME="URI" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZSTR_PHABRICATOR_DIFF_RES" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Diff Result" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_DIFF_RES" FIELDNAME="ID" DDLANGUAGE="E" POSITION="0001" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_DIFF_RES" FIELDNAME="URI" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZSTR_ABAPTEXT" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="asdf" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZSTR_ABAPTEXT" FIELDNAME="OBJTYPE" DDLANGUAGE="E" POSITION="0001" ROLLNAME="VERSOBJTYP" ADMINFIELD="0" INTTYPE="C" INTLEN="000008" DOMNAME="OBJECT" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Version Management: Object Type" REPTEXT="Type" SCRTEXT_S="Obj. Type" SCRTEXT_M="Object Type" SCRTEXT_L="Object Type" DOMNAME3L="OBJECT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_ABAPTEXT" FIELDNAME="OBJNAME" DDLANGUAGE="E" POSITION="0002" ROLLNAME="VERSOBJNAM" ADMINFIELD="0" INTTYPE="C" INTLEN="000220" DOMNAME="VERSOBJNAM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000110" OUTPUTLEN="000110" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Version management: Object name" REPTEXT="Obj.Name" SCRTEXT_S="Obj. Name" SCRTEXT_M="Object Name" SCRTEXT_L="Object Name" DOMNAME3L="VERSOBJNAM" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_ABAPTEXT" FIELDNAME="ABAPTEXT" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ABAPTXT255_TAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Text Table" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_ABAPTEXT" FIELDNAME="TARGETABAPTEXT" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ABAPTXT255_TAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Text Table" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZPHABRICATOR_CONNECT" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="asdf" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT" FIELDNAME="RESULTS" DDLANGUAGE="E" POSITION="0001" ROLLNAME="ZPHABRICATOR_CONNECT_RESULT" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRU" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRUS" MASKLEN="0000" DDTEXT="Phabricator results" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT" FIELDNAME="CONNECTIONID" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="01" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT" FIELDNAME="SESSIONKEY" DDLANGUAGE="E" POSITION="0003" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="01" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT" FIELDNAME="USERPHID" DDLANGUAGE="E" POSITION="0004" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="01" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT" FIELDNAME="ERROR_CODE" DDLANGUAGE="E" POSITION="0005" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT" FIELDNAME="ERROR_INFO" DDLANGUAGE="E" POSITION="0006" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZPHABRICATOR_CONNECT_RESULT" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Phabricator results" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT_RESULT" FIELDNAME="CONNECTIONID" DDLANGUAGE="E" POSITION="0001" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT_RESULT" FIELDNAME="SESSIONKEY" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONNECT_RESULT" FIELDNAME="USERPHID" DDLANGUAGE="E" POSITION="0003" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZPHABRICATOR_QUERY" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Results" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZPHABRICATOR_QUERY" FIELDNAME="ID" DDLANGUAGE="E" POSITION="0001" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_QUERY" FIELDNAME="PHID" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_QUERY" FIELDNAME="TITLE" DDLANGUAGE="E" POSITION="0003" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_QUERY" FIELDNAME="URI" DDLANGUAGE="E" POSITION="0004" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_QUERY" FIELDNAME="STATUS" DDLANGUAGE="E" POSITION="0005" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZPHABRICATOR_CONDUIT" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Conduit Auth String" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONDUIT" FIELDNAME="SESSIONKEY" DDLANGUAGE="E" POSITION="0001" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR_CONDUIT" FIELDNAME="CONNECTIONID" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZSTR_PHABRICATOR_DIFF" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Diff Result" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115427" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_DIFF" FIELDNAME="RESULT" DDLANGUAGE="E" POSITION="0001" ROLLNAME="ZSTR_PHABRICATOR_DIFF_RES" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRU" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRUS" MASKLEN="0000" DDTEXT="Diff Result" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_DIFF" FIELDNAME="ID" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="01" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_DIFF" FIELDNAME="URI" DDLANGUAGE="E" POSITION="0003" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="01" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_DIFF" FIELDNAME="ERROR_CODE" DDLANGUAGE="E" POSITION="0004" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_DIFF" FIELDNAME="ERROR_INFO" DDLANGUAGE="E" POSITION="0005" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZPHABRICATOR" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Phabricator Certificates" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115449" CONTFLAG="C" PROZPUFF="000" EXCLASS="0">
  <dd09l TABNAME="ZPHABRICATOR" AS4LOCAL="A" AS4VERS="0000" TABKAT="0" TABART="APPL0" SCHFELDANZ="000" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115449" BUFALLOW="N"/>
  <dd03p TABNAME="ZPHABRICATOR" FIELDNAME="SAP_USERNAME" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="UNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" NOTNULL="X" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR" FIELDNAME="PHAB_USER" DDLANGUAGE="E" POSITION="0002" ROLLNAME="UNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZPHABRICATOR" FIELDNAME="CERTIFICATE" DDLANGUAGE="E" POSITION="0003" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZSTR_PHABRICATOR_USER" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Phabricator User" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" PROZPUFF="000" EXCLASS="0">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_USER" FIELDNAME="PHID" DDLANGUAGE="E" POSITION="0001" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_USER" FIELDNAME="USERNAME" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_USER" FIELDNAME="REALNAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_USER" FIELDNAME="IMAGE" DDLANGUAGE="E" POSITION="0004" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZSTR_PHABRICATOR_USER" FIELDNAME="URI" DDLANGUAGE="E" POSITION="0005" ROLLNAME="CACL_STRING" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" DOMNAME="STRING" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DOMNAME3L="STRING" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TRAN TCODE="ZPHAB" PGMNA="ZPHABRICATOR" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZPHAB" TTEXT="Phabricator"/>
  <tstcc TCODE="ZPHAB" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TTYP TYPENAME="ZPHABRICATOR_REVIEWERS" DDLANGUAGE="E" ROWTYPE="CACL_STRING" ROWKIND="E" DATATYPE="STRG" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115426" DDTEXT="Reviewers" TYPELEN="000008" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZTTY_ABAPTEXT" DDLANGUAGE="E" ROWTYPE="ZSTR_ABAPTEXT" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115427" DDTEXT="ZSTR_ABAPTEXT" TYPELEN="000248" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZTTYPHABRICATOR_QUERY" DDLANGUAGE="E" ROWTYPE="ZPHABRICATOR_QUERY" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115427" DDTEXT="ZPHABRICATOR_QUERY" TYPELEN="000040" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZTTY_PHABRICATOR_USER" DDLANGUAGE="E" ROWTYPE="ZSTR_PHABRICATOR_USER" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" AS4USER="TETREAUL_SAP" AS4DATE="20141126" AS4TIME="115427" DDTEXT="ZSTR_PHABRICATOR_USER" TYPELEN="000040" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <CLAS CLSNAME="ZCL_JSON_HANDLER" VERSION="1" LANGU="E" DESCRIPT="JSON/ABAP Handler" UUID="000C29E6E17A1EE49C9FF0AC882A08E6" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="ZCL_JSON_HANDLER" REFCLSNAME="IF_HTTP_EXTENSION" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" RELTYPE="1"/>
  <publicSection>class ZCL_JSON_HANDLER definition
  public
  create public .

*&quot;* public components of class ZCL_JSON_HANDLER
*&quot;* do not include other source files here!!!
public section.

  interfaces IF_HTTP_EXTENSION .

  type-pools ABAP .
  constants XNL type ABAP_CHAR1 value %_NEWLINE. &quot;#EC NOTEXT
  constants XCRLF type ABAP_CR_LF value %_CR_LF. &quot;#EC NOTEXT
  data MY_SERVICE type STRING .
  data MY_URL type STRING .

  class-methods ABAP2JSON
    importing
      !ABAP_DATA type DATA
      !NAME type STRING optional
      !UPCASE type XFELD optional
    returning
      value(JSON_STRING) type STRING
    exceptions
      ERROR_IN_DATA_DESCRIPTION .
  class-methods ABAP2PERL
    importing
      !ABAP_DATA type DATA
      !NAME type STRING optional
      !UPCASE type XFELD optional
    returning
      value(PERL_STRING) type STRING
    exceptions
      ERROR_IN_DATA_DESCRIPTION .
  class-methods ABAP2XML
    importing
      !ABAP_DATA type DATA
      !NAME type STRING optional
      !WITH_XML_HEADER type ABAP_BOOL default ABAP_FALSE
      !UPCASE type XFELD optional
      !NAME_ATR type STRING optional
    returning
      value(XML_STRING) type STRING .
  class-methods ABAP2YAML
    importing
      !ABAP_DATA type DATA
      !NAME type STRING optional
      !UPCASE type XFELD optional
      !Y_LEVEL type I default 0
      !S_INDEX type I default 0
      !FIRST_ROW type XFELD optional
      !DONT_INDENT type XFELD optional
    returning
      value(YAML_STRING) type STRING
    exceptions
      ERROR_IN_DATA_DESCRIPTION .
  class-methods BUILD_PARAMS
    importing
      !FUNCTION_NAME type RS38L_FNAM
    exporting
      !PARAMTAB type ABAP_FUNC_PARMBIND_TAB
      !EXCEPTAB type ABAP_FUNC_EXCPBIND_TAB
      !PARAMS type ANY
    exceptions
      INVALID_FUNCTION
      UNSUPPORTED_PARAM_TYPE .
  type-pools JS .
  class-methods JSON2ABAP
    importing
      !JSON_STRING type STRING optional
      !VAR_NAME type STRING optional
      !PROPERTY_PATH type STRING default &apos;json_obj&apos;
    exporting
      value(PROPERTY_TABLE) type JS_PROPERTY_TAB
    changing
      !JS_OBJECT type ref to CL_JAVA_SCRIPT optional
      value(ABAP_DATA) type ANY optional
    raising
      ZCX_JSON .
  class-methods JSON_DESERIALIZE
    importing
      !JSON type STRING
    changing
      !PARAMTAB type ABAP_FUNC_PARMBIND_TAB
    raising
      ZCX_JSON .
  methods NOTES
    returning
      value(TEXT) type STRING .
  class-methods SERIALIZE_JSON
    importing
      !PARAMTAB type ABAP_FUNC_PARMBIND_TAB
      !PARAMS type ANY optional
      !EXCEPTAB type ABAP_FUNC_EXCPBIND_TAB optional
      !SHOW_IMPP type ABAP_BOOL optional
      !JSONP type STRING optional
      !LOWERCASE type ABAP_BOOL default ABAP_FALSE
    exporting
      !O_STRING type STRING .
  class-methods SERIALIZE_PERL
    importing
      !PARAMTAB type ABAP_FUNC_PARMBIND_TAB
      !PARAMS type ANY optional
      !EXCEPTAB type ABAP_FUNC_EXCPBIND_TAB optional
      !SHOW_IMPP type ABAP_BOOL optional
      !JSONP type STRING optional
      !LOWERCASE type ABAP_BOOL default ABAP_FALSE
      !FUNCNAME type RS38L_FNAM
    exporting
      !PERL_STRING type STRING .
  class-methods SERIALIZE_XML
    importing
      !PARAMTAB type ABAP_FUNC_PARMBIND_TAB
      !PARAMS type ANY optional
      !EXCEPTAB type ABAP_FUNC_EXCPBIND_TAB optional
      !SHOW_IMPP type ABAP_BOOL optional
      !JSONP type STRING optional
      !FUNCNAME type RS38L_FNAM
      !LOWERCASE type ABAP_BOOL default ABAP_FALSE
      !FORMAT type STRING optional
    exporting
      !O_STRING type STRING .
  class-methods SERIALIZE_YAML
    importing
      !PARAMTAB type ABAP_FUNC_PARMBIND_TAB
      !PARAMS type ANY optional
      !EXCEPTAB type ABAP_FUNC_EXCPBIND_TAB optional
      !SHOW_IMPP type ABAP_BOOL optional
      !JSONP type STRING optional
      !LOWERCASE type ABAP_BOOL default ABAP_FALSE
    exporting
      !YAML_STRING type STRING .
  class-methods DESERIALIZE_ID
    importing
      !JSON type STRING
    changing
      !PARAMTAB type ABAP_FUNC_PARMBIND_TAB
    raising
      ZCX_JSON .
  class-methods SERIALIZE_ID
    importing
      !PARAMTAB type ABAP_FUNC_PARMBIND_TAB
      !PARAMS type ANY optional
      !EXCEPTAB type ABAP_FUNC_EXCPBIND_TAB optional
      !SHOW_IMPP type ABAP_BOOL optional
      !JSONP type STRING optional
      !LOWERCASE type ABAP_BOOL default ABAP_FALSE
      !FORMAT type STRING default &apos;JSON&apos;
      !FUNCNAME type RS38L_FNAM optional
    exporting
      !O_STRING type STRING
    raising
      ZCX_JSON .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCL_JSON_HANDLER
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCL_JSON_HANDLER
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZCL_JSON_HANDLER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <typeUsage CLSNAME="ZCL_JSON_HANDLER" TYPEGROUP="JS" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>JS</forwardDeclaration>
  <attribute CLSNAME="ZCL_JSON_HANDLER" CMPNAME="MY_SERVICE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_JSON_HANDLER" CMPNAME="MY_URL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_JSON_HANDLER" CMPNAME="XCRLF" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="2" ATTVALUE="%_CR_LF" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_CR_LF" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_JSON_HANDLER" CMPNAME="XNL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="2" ATTVALUE="%_NEWLINE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_CHAR1" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_JSON_HANDLER" CPDNAME="IF_HTTP_EXTENSION~HANDLE_REQUEST">
   <source>method IF_HTTP_EXTENSION~HANDLE_REQUEST.
*/*************************************************************************/
*/ Assign this handler to a service in ICF. This allows any ABAP function */
*/ module to be called directly by URL and exchange data in JSON format.  */
*/ --
*/ This code is distributed under the terms of Apache License Version 2.0 */
*/ (see http://www.apache.org/licenses/LICENSE-2.0.html)                  */
*/ --
*/ (C) César Martín &lt;cesar.martin@sap.com&gt;                                */
*/ Many thanks to Juan Díez for his ideas, help, and support.             */
*/ --
*/*************************************************************************/
*/ If you want to use the SAP standard provided transformation for JSON   */
*/ and XML, uncomment the lines calling serialize_id and deserialize_id   */
*/*************************************************************************/
  TYPE-POOLS abap.

  DATA: show_import_params TYPE abap_bool VALUE abap_false,
        lowercase TYPE abap_bool VALUE abap_false,
        path_info      TYPE string,
        p_info_tab     TYPE TABLE OF string,
        format         TYPE string,
        accept         TYPE string,
        action         TYPE string,
        request_method TYPE string,
        jsonp_callback TYPE string,
        i_content_type TYPE string,
        i_cdata        TYPE string,
        o_cdata        TYPE string,
        exceptheader   TYPE string,
        etext          TYPE string,
        etext2         TYPE string,
        str_item       TYPE string,
        host           TYPE string,
        port           TYPE string,
        proto          TYPE string,
        http_code      TYPE i,
        http_status    TYPE string,

        funcname       TYPE rs38l_fnam,
        funcname2      TYPE string,
        dparam         TYPE abap_parmname,
        t_params_p     TYPE STANDARD TABLE OF rfc_fint_p,
        paramtab       TYPE abap_func_parmbind_tab,
        exceptab       TYPE abap_func_excpbind_tab,
        exception      TYPE LINE OF abap_func_excpbind_tab,
        funcrc         TYPE sy-subrc,
        oexcp          TYPE REF TO cx_root,
        qs_nvp         TYPE tihttpnvp,
        l_lines        TYPE i,
        l_idx          TYPE i.

  FIELD-SYMBOLS &lt;qs_nvp&gt; TYPE ihttpnvp.
  FIELD-SYMBOLS &lt;fm_param&gt; TYPE abap_func_parmbind.
  FIELD-SYMBOLS &lt;fm_value_str&gt; TYPE string.
  FIELD-SYMBOLS &lt;fm_value_i&gt; TYPE i.
  FIELD-SYMBOLS &lt;fm_int_handler&gt; TYPE zicf_handler_data.

  DEFINE http_error.
    &quot;   &amp;1   http status code
    &quot;   &amp;2   status text
    &quot;   &amp;3   error message
    server-&gt;response-&gt;set_header_field( name = &apos;Content-Type&apos;  value = &apos;application/json&apos; ).
    http_code = &amp;1.
    server-&gt;response-&gt;set_status( code = http_code  reason = &amp;2 ).
    concatenate &apos;{&quot;ERROR_CODE&quot;:&quot;&apos; &amp;1 &apos;&quot;,&quot;ERROR_MESSAGE&quot;:&quot;&apos; &amp;3 &apos;&quot;,&quot;INFO_LINK&quot;:&quot;&apos; me-&gt;my_url me-&gt;my_service &apos;?action=notes&quot;}&apos; into etext.
    server-&gt;response-&gt;set_cdata( etext ).
    exit.
  END-OF-DEFINITION.

* Get Server Info:

  server-&gt;get_location( IMPORTING host = host  port = port  out_protocol = proto ).
  CONCATENATE proto &apos;://&apos; host &apos;:&apos; port INTO me-&gt;my_url.

** Get all client Info:
*data clnt_hfields type TIHTTPNVP.
*server-&gt;request-&gt;get_header_fields( changing fields = clnt_hfields ).


* GET and POST and other methods are allowed.
* Uncomment or extend this if you want alternative actions following
* request methods, in order to define a REST style behaviour
* or, better, check an alternative approach on a way to do that
* inside the FM (search for _ICF_DATA below).
*  if request_method &lt;&gt; &apos;POST&apos;.
****    http_error 405 &apos;Method not allowed&apos; &apos;Method not allowed.&apos;.
*  endif.


* Get form and header fields
  me-&gt;my_service         = server-&gt;request-&gt;get_header_field( name = &apos;~script_name&apos; ).
  request_method         = server-&gt;request-&gt;get_header_field( name = &apos;~request_method&apos; ).
  i_content_type         = server-&gt;request-&gt;get_header_field( name = &apos;content-type&apos; ).
  show_import_params   = server-&gt;request-&gt;get_form_field( &apos;show_import_params&apos; ).
  action                 = server-&gt;request-&gt;get_form_field( &apos;action&apos; ).
  jsonp_callback         = server-&gt;request-&gt;get_form_field( &apos;callback&apos; ).
  lowercase              = server-&gt;request-&gt;get_form_field( &apos;lowercase&apos; ).
  format               = server-&gt;request-&gt;get_form_field( &apos;format&apos; ).
  accept               = server-&gt;request-&gt;get_header_field( name = &apos;Accept&apos; ).

* Try &quot;$&quot; equivalents:
  IF format IS INITIAL.
    format = server-&gt;request-&gt;get_form_field( &apos;$format&apos; ).
  ENDIF.
  IF jsonp_callback IS INITIAL.
    jsonp_callback = server-&gt;request-&gt;get_form_field( &apos;$callback&apos; ).
  ENDIF.

* Get function name from PATH_INFO
  path_info = server-&gt;request-&gt;get_header_field( name = &apos;~path_info&apos; ).
  SPLIT path_info AT &apos;/&apos; INTO TABLE p_info_tab.
  READ TABLE p_info_tab INDEX 2 INTO funcname.
  READ TABLE p_info_tab INDEX 3 INTO funcname2.
  IF sy-subrc EQ 0.
    CONCATENATE &apos;//&apos; funcname &apos;/&apos; funcname2 INTO funcname.
    CONDENSE funcname.
  ENDIF.
  TRANSLATE funcname TO UPPER CASE.
  IF funcname IS INITIAL AND action IS INITIAL.
    http_error &apos;404&apos; &apos;Not Found&apos; &apos;Empty request.&apos; .
  ENDIF.

***** THIS IS VERY OBSOLETE. PARAMS SHOULD NOT BE PASSED AS PATH_INFO *****
***** REMOVE THIS ******
* Read lowercase and format parameters from path_info (query string has precedence).
*  loop at p_info_tab into str_item.
*    translate str_item to lower case.
*    case str_item.
*      when &apos;lc&apos;.
*        if lowercase is initial.
*          lowercase = &apos;X&apos;.
*        endif.
*      when &apos;json&apos; or &apos;yaml&apos; or &apos;xml&apos; or &apos;perl&apos;.
*        if format is initial.
*          format = str_item.
*        endif.
*      when others.
*        &quot; we&apos;ll see
*    endcase.
*  endloop.
**** REMOVE THIS *******


* Get the desired response format from &quot;Accept&quot; header (as in RFC 2616 sec 14.1)
* See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html. Thanks Uwe!!
  IF accept IS NOT INITIAL AND format IS INITIAL.
    TRANSLATE accept TO LOWER CASE.
    IF accept CS &apos;/json&apos;.
      format = &apos;json&apos;.
    ELSEIF accept CS &apos;/yaml&apos;.
      format = &apos;yaml&apos;.
    ELSEIF accept CS &apos;/xml&apos;.
      format = &apos;xml&apos;.
    ELSEIF accept CS &apos;/perl&apos;.
      format = &apos;perl&apos;.
    ELSEIF accept CS &apos;*/*&apos;.
      CLEAR format.  &quot; for the moment, ignore quality levels in Accept, send default format (json).
    ELSE.
      http_error &apos;406&apos; &apos;Not Acceptable&apos; &apos;The server cannot send a response which is acceptable according to the combined Accept field value&apos;.
    ENDIF.
  ENDIF.

  TRANSLATE format TO UPPER CASE.
  TRANSLATE action TO UPPER CASE.
  IF show_import_params IS NOT INITIAL.
    show_import_params = abap_true.
  ENDIF.


***************************
* Do alternative actions...
  CASE action.
    WHEN &apos;NOTES&apos;.
      server-&gt;response-&gt;set_header_field( name = &apos;Content-Type&apos;  value = &apos;text/html&apos; ).
      server-&gt;response-&gt;set_status( code = 200 reason = &apos;OK&apos; ).
      o_cdata = me-&gt;notes( ).
      server-&gt;response-&gt;set_cdata( o_cdata ).
      EXIT.
*    when &apos;TEST&apos;.
****** TEST *****
*      etext = me-&gt;test( i_cdata ).
*      http_error &apos;200&apos; &apos;Ok&apos; etext.
*      exit.
****** Investigate further... *****
    WHEN &apos;START_SESSION&apos;.
**      server-&gt;stateful = 1.
      server-&gt;set_session_stateful( stateful = server-&gt;co_enabled ).
    WHEN &apos;END_SESSION&apos;.
**      server-&gt;stateful = 0.
      server-&gt;set_session_stateful( stateful = server-&gt;co_disabled ).
    WHEN OTHERS.
      &quot; just go on
  ENDCASE.



* Check Authorization. Create the relevant auth object in SU21 and assign
* the authorized functions to the user. Uncomment to implement security.
*  IF sy-uname NE &apos;TETREAUL_SAP&apos; AND sy-uname NE &apos;BUNGAYJ_SAP&apos;.
**  authority-check object &apos;Z_JSON&apos;
**         id &apos;FMNAME&apos; field funcname.
**  if sy-subrc ne 0.
*    http_error &apos;403&apos; &apos;Not authorized&apos; &apos;You are not authorized to invoke this function module.&apos;.
*  ENDIF.



******************
* get input data *
******************
  CLEAR i_cdata.
  i_cdata = server-&gt;request-&gt;get_cdata( ).
  server-&gt;request-&gt;get_form_fields_cs( CHANGING fields = qs_nvp ).

* We map the query string to a simple JSON input. Handy for REST style queries.
* The query string may come from GET requests in the url and content data in
* POST request in x-www-form-urlencoded. ICF handles this perfectly and mixes both!! Great!!
  IF ( qs_nvp IS NOT INITIAL AND i_cdata IS INITIAL ) OR
      i_content_type CS &apos;application/x-www-form-urlencoded&apos;.
    l_lines = LINES( qs_nvp ).
    CLEAR l_idx.
    MOVE &apos;{&apos; TO i_cdata.
    LOOP AT qs_nvp ASSIGNING &lt;qs_nvp&gt;.
      ADD 1 TO l_idx.
      TRANSLATE &lt;qs_nvp&gt;-name TO UPPER CASE. &quot; ABAP is upper case internally anyway.
      CONCATENATE i_cdata &apos;&quot;&apos; &lt;qs_nvp&gt;-name &apos;&quot;:&quot;&apos; &lt;qs_nvp&gt;-value &apos;&quot;&apos; INTO i_cdata
        RESPECTING BLANKS.
      IF l_idx &lt; l_lines.
        CONCATENATE i_cdata &apos;,&apos; INTO i_cdata RESPECTING BLANKS.
      ENDIF.
    ENDLOOP.
    CONCATENATE i_cdata &apos;}&apos; INTO i_cdata.
  ENDIF.



* Prepare params to call function
  CALL METHOD zcl_json_handler=&gt;build_params
    EXPORTING
      function_name    = funcname
    IMPORTING
      params           = t_params_p
      paramtab         = paramtab
      exceptab         = exceptab
    EXCEPTIONS
      invalid_function = 1
      OTHERS           = 2.

  IF sy-subrc &lt;&gt; 0.
    CONCATENATE &apos;Invalid Function. &apos; sy-msgid sy-msgty sy-msgno &apos;: &apos;
            sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            INTO etext SEPARATED BY &apos;-&apos;.
    http_error &apos;500&apos; &apos;Server Error&apos; etext.
  ENDIF.


**********************
* Process input data *
**********************
  TRY.
      CALL METHOD me-&gt;json_deserialize     &quot; The classic method using JavaScript (JSON only)
*      CALL METHOD me-&gt;deserialize_id  &quot; The new method using transformation id. This method accepts both JSON and XML input!!! Great!!
        EXPORTING
          json     = i_cdata
        CHANGING
          paramtab = paramtab.

    CATCH cx_root INTO oexcp.

      etext = oexcp-&gt;if_message~get_text( ).

      http_error &apos;500&apos; &apos;Internal Server Error&apos; etext.

  ENDTRY.
*/**********************************/*
*/**********************************/*



*/************************************************/*
*/ Pass some request info to function module      /*
*/ for FMs implementing a REST model or whatever  /*
*/************************************************/*
  READ TABLE paramtab WITH KEY name = &apos;_ICF_DATA&apos; ASSIGNING &lt;fm_param&gt;.
  IF sy-subrc EQ 0.
    CREATE DATA &lt;fm_param&gt;-value TYPE zicf_handler_data.
    ASSIGN &lt;fm_param&gt;-value-&gt;* TO &lt;fm_int_handler&gt;.
    &lt;fm_int_handler&gt;-request_method = request_method.
    &lt;fm_int_handler&gt;-icf_url = me-&gt;my_url.
    &lt;fm_int_handler&gt;-icf_service = me-&gt;my_service.
    &lt;fm_int_handler&gt;-path_info = path_info.
    &lt;fm_int_handler&gt;-qs_tab = qs_nvp.
    &lt;fm_int_handler&gt;-i_json_data = i_cdata.
    APPEND &apos;_ICF_DATA&apos; TO &lt;fm_int_handler&gt;-delete_params.
    &lt;fm_int_handler&gt;-server = server. &quot; Beware!
  ENDIF.



****************************
* Call the function module *
****************************
  TRY.

      CALL FUNCTION funcname
        PARAMETER-TABLE
          paramtab
        EXCEPTION-TABLE
          exceptab.

    CATCH cx_root INTO oexcp.

      etext = oexcp-&gt;if_message~get_longtext(  preserve_newlines = abap_true ).

      http_error &apos;500&apos; &apos;Internal Server Error&apos; etext.

  ENDTRY.


* Remove unused exceptions
  funcrc = sy-subrc.
  DELETE exceptab WHERE value NE funcrc.
  READ TABLE exceptab INTO exception WITH KEY value = funcrc.
  IF sy-subrc EQ 0.
    exceptheader = exception-name.
    CALL METHOD server-&gt;response-&gt;set_header_field(
      name = &apos;X-SAPRFC-Exception&apos;
      value = exceptheader ).
  ENDIF.


*/*******************************************************************/*
*/ Read specific FM parameters for REST type interfaces              /*
*/ I need to find a way on how to operate with some http codes:       /*
*/ 201 Created - URI of resource created is set in Location header   /*
*/ 202 Accepted - Response contains status information
*/ 203 Non-Authoritative Information
*/ 204 No Content - NO CONTENT is sent, nothing, nada
*/ 205 Reset Content - NO CONTENT is sent, nothing, nada
*/ 206 Partial Content - probably will not implement this
*/ Codes 3xx, 4xx should also be handled.
*/***********************************/*
  IF &lt;fm_int_handler&gt; IS ASSIGNED.
    IF &lt;fm_int_handler&gt;-http_code IS NOT INITIAL.
      server-&gt;response-&gt;set_status( code = &lt;fm_int_handler&gt;-http_code  reason = &lt;fm_int_handler&gt;-http_status ).
      CASE &lt;fm_int_handler&gt;-http_code.
        WHEN 204 OR 205.
          EXIT.
        WHEN OTHERS. &quot; many to add?
      ENDCASE.
    ENDIF.
    IF &lt;fm_int_handler&gt;-error_message IS NOT INITIAL.
      str_item = &lt;fm_int_handler&gt;-http_code. CONDENSE str_item.
      http_error str_item &lt;fm_int_handler&gt;-http_status &lt;fm_int_handler&gt;-error_message.
    ENDIF.
* Delete indicated params for not showing them in the response
    LOOP AT &lt;fm_int_handler&gt;-delete_params INTO dparam.
      DELETE paramtab WHERE name EQ dparam.
    ENDLOOP.
  ENDIF.


* Prepare response. Serialize to output format stream.
  CASE format.

    WHEN &apos;YAML&apos;.

      CALL METHOD me-&gt;serialize_yaml
        EXPORTING
          paramtab    = paramtab
          exceptab    = exceptab
          params      = t_params_p
          jsonp       = jsonp_callback
          show_impp   = show_import_params
          lowercase   = lowercase
        IMPORTING
          yaml_string = o_cdata.

      server-&gt;response-&gt;set_header_field( name = &apos;Content-Type&apos; value = &apos;text/plain&apos; ).

    WHEN &apos;PERL&apos;.

      CALL METHOD me-&gt;serialize_perl
        EXPORTING
          paramtab    = paramtab
          exceptab    = exceptab
          params      = t_params_p
          jsonp       = jsonp_callback
          show_impp   = show_import_params
          funcname    = funcname
          lowercase   = lowercase
        IMPORTING
          perl_string = o_cdata.

      server-&gt;response-&gt;set_header_field( name = &apos;Content-Type&apos; value = &apos;text/plain&apos; ).

    WHEN &apos;XML&apos;.

      CALL METHOD me-&gt;serialize_xml
*      CALL METHOD me-&gt;serialize_id
        EXPORTING
          paramtab  = paramtab
          exceptab  = exceptab
          params    = t_params_p
          jsonp     = jsonp_callback
          show_impp = show_import_params
          funcname  = funcname
          lowercase = lowercase
          format    = format
        IMPORTING
          o_string  = o_cdata.

      server-&gt;response-&gt;set_header_field( name = &apos;Content-Type&apos; value = &apos;application/xml&apos; ).

    WHEN OTHERS. &quot; the others default to JSON.

      format = &apos;JSON&apos;.
      CALL METHOD me-&gt;serialize_json
*      CALL METHOD me-&gt;serialize_id
        EXPORTING
          paramtab    = paramtab
          exceptab    = exceptab
          params      = t_params_p
          jsonp       = jsonp_callback
          show_impp   = show_import_params
          lowercase   = lowercase
*          format      = format
        IMPORTING
          o_string = o_cdata.

      server-&gt;response-&gt;set_header_field( name = &apos;Content-Type&apos; value = &apos;application/json&apos; ).
      IF jsonp_callback IS NOT INITIAL.
        server-&gt;response-&gt;set_header_field( name = &apos;Content-Type&apos; value = &apos;application/javascript&apos; ).
      ENDIF.
  ENDCASE.


* Set response:
  server-&gt;response-&gt;set_header_field( name = &apos;X-Data-Format&apos; value = format ). &quot;
* Activate compression (will compress when size&gt;1kb if requested by client in Accept-Encoding: gzip. Very nice.).
  server-&gt;response-&gt;set_compression( ).
  server-&gt;response-&gt;set_cdata( data = o_cdata ).

*******************************************
*******************************************
**********      *      *          *********
*********        *      *        **********
********          *      *      ***********
*******************************************
*******************************************
endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2JSON" VERSION="1" LANGU="E" DESCRIPT="Converts ABAP to JSON" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2JSON" SCONAME="ABAP_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2JSON" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Parameter name (isolated scalars and recursive calls)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2JSON" SCONAME="UPCASE" VERSION="1" LANGU="E" DESCRIPT="Put names in upper case (defaults to lower case)" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2JSON" SCONAME="JSON_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2JSON" SCONAME="ERROR_IN_DATA_DESCRIPTION" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <source>method ABAP2JSON.
*/**********************************************/*
*/ This method takes any ABAP data variable and /*
*/ returns a string representing its value in   /*
*/ JSON format.                                 /*
*/ ABAP references are always de-referenced and /*
*/ treated as normal variables.                 /*
*/**********************************************/*

  type-pools: abap.

  constants:
    c_comma type c value &apos;,&apos;,
    c_colon type c value &apos;:&apos;,
    c_quote type c value &apos;&quot;&apos;.

  data:
    dont_quote type xfeld,
    json_fragments type table of string,
    rec_json_string type string,
    l_type  type c,
    s_type type c,
    l_comps type i,
    l_lines type i,
    l_index type i,
    l_value type string,
    l_name type string,
    l_strudescr type ref to cl_abap_structdescr.

  field-symbols:
    &lt;abap_data&gt; type any,
    &lt;itab&gt; type any table,
    &lt;stru&gt; type any table,
    &lt;comp&gt; type any,
    &lt;abapcomp&gt; type abap_compdescr.


  define get_scalar_value.
    &quot; &amp;1 : assigned var
    &quot; &amp;2 : abap data
    &quot; &amp;3 : abap type
    &amp;1 = &amp;2.
****************************************************
* Adapt some basic ABAP types (pending inclusion of all basic abap types?)
* Feel free to customize this for your needs
    case &amp;3.
*       1. ABAP numeric types
      when &apos;I&apos;. &quot; Integer
        condense &amp;1.
        if &amp;1 &lt; 0.
          shift &amp;1 by 1 places right circular.
        endif.
        dont_quote = &apos;X&apos;.

      when &apos;F&apos;. &quot; Float (pending transformation to JSON float format with no quotes)
*          condense &amp;1.

      when &apos;P&apos;. &quot; Packed number (used in quantities, for example)
        condense &amp;1.

      when &apos;X&apos;. &quot; Hexadecimal
*         &quot; Leave it as is, as JSON doesn&apos;t support Hex or Octal.

*       2. ABAP char types
      when &apos;D&apos;. &quot; Date type
        CONCATENATE &amp;1(4) &apos;-&apos; &amp;1+4(2) &apos;-&apos; &amp;1+6(2) INTO &amp;1.

      when &apos;T&apos;. &quot; Time representation
        CONCATENATE &amp;1(2) &apos;:&apos; &amp;1+2(2) &apos;:&apos; &amp;1+4(2) INTO &amp;1.

      when &apos;N&apos;. &quot; Numeric text field
*           condense &amp;1.

      when &apos;C&apos; or &apos;g&apos;. &quot; Char sequences and Strings
* Put safe chars
        replace all occurrences of &apos;\&apos; in &amp;1 with &apos;\\&apos; .
        replace all occurrences of &apos;&quot;&apos; in &amp;1 with &apos;\&quot;&apos; .
        replace all occurrences of cl_abap_char_utilities=&gt;cr_lf in &amp;1 with &apos;\r\n&apos; .
        replace all occurrences of cl_abap_char_utilities=&gt;newline in &amp;1 with &apos;\n&apos; .
        replace all occurrences of cl_abap_char_utilities=&gt;horizontal_tab in &amp;1 with &apos;\t&apos; .
        replace all occurrences of cl_abap_char_utilities=&gt;backspace in &amp;1 with &apos;\b&apos; .
        replace all occurrences of cl_abap_char_utilities=&gt;form_feed in &amp;1 with &apos;\f&apos; .

      when &apos;y&apos;.  &quot; XSTRING
* Put the XSTRING in Base64
        &amp;1 = cl_http_utility=&gt;ENCODE_X_BASE64( &amp;2 ).

      when others.
* Don&apos;t hesitate to add and modify scalar abap types to suit your taste.

    endcase.
** End of scalar data preparing.

* Enclose value in quotes (or not)
    if dont_quote ne &apos;X&apos;.
      concatenate c_quote &amp;1 c_quote into &amp;1.
    endif.

    clear dont_quote.

  end-of-definition.


***************************************************
*  Prepare field names, JSON does quote names!!   *
*  You must be strict in what you produce.        *
***************************************************
  if name is not initial.
    concatenate c_quote name c_quote c_colon into rec_json_string.
    append rec_json_string to json_fragments.
    clear rec_json_string.
  endif.

**
* Get ABAP data type
  describe field abap_data type l_type components l_comps.

***************************************************
*  Get rid of data references
***************************************************
  if l_type eq cl_abap_typedescr=&gt;typekind_dref.
    assign abap_data-&gt;* to &lt;abap_data&gt;.
    if sy-subrc ne 0.
      append &apos;{}&apos; to json_fragments.
      concatenate lines of json_fragments into json_string.
      exit.
    endif.
  else.
    assign abap_data to &lt;abap_data&gt;.
  endif.

* Get ABAP data type again and start
  describe field &lt;abap_data&gt; type l_type components l_comps.

***************************************************
*  Tables
***************************************************
  if l_type eq cl_abap_typedescr=&gt;typekind_table.
* &apos;[&apos; JSON table opening bracket
    append &apos;[&apos; to json_fragments.
    assign &lt;abap_data&gt; to &lt;itab&gt;.
    l_lines = lines( &lt;itab&gt; ).
    loop at &lt;itab&gt; assigning &lt;comp&gt;.
      add 1 to l_index.
*&gt; Recursive call for each table row:
      rec_json_string = abap2json( abap_data = &lt;comp&gt; upcase = upcase ).
      append rec_json_string to json_fragments.
      clear rec_json_string.
      if l_index &lt; l_lines.
        append c_comma to json_fragments.
      endif.
    endloop.
    append &apos;]&apos; to json_fragments.
* &apos;]&apos; JSON table closing bracket


***************************************************
*  Structures
***************************************************
  else.
    if l_comps is not initial.
* &apos;{&apos; JSON object opening curly brace
      append &apos;{&apos; to json_fragments.
      l_strudescr ?= cl_abap_typedescr=&gt;describe_by_data( &lt;abap_data&gt; ).
      loop at l_strudescr-&gt;components assigning &lt;abapcomp&gt;.
        l_index = sy-tabix .
        assign component &lt;abapcomp&gt;-name of structure &lt;abap_data&gt; to &lt;comp&gt;.
        l_name = &lt;abapcomp&gt;-name.
** ABAP names are usually in caps, set upcase to avoid the conversion to lower case.
        if upcase ne &apos;X&apos;.
          translate l_name to lower case.
        endif.
        describe field &lt;comp&gt; type s_type.
        if s_type eq cl_abap_typedescr=&gt;typekind_table or s_type eq cl_abap_typedescr=&gt;typekind_dref or
           s_type eq cl_abap_typedescr=&gt;typekind_struct1 or s_type eq cl_abap_typedescr=&gt;typekind_struct2.
*&gt; Recursive call for non-scalars:
          rec_json_string = abap2json( abap_data = &lt;comp&gt; name = l_name upcase = upcase ).
        else.
          if s_type eq cl_abap_typedescr=&gt;TYPEKIND_OREF or s_type eq cl_abap_typedescr=&gt;TYPEKIND_IREF.
            rec_json_string = &apos;&quot;REF UNSUPPORTED&quot;&apos;.
          else.
            get_scalar_value rec_json_string &lt;comp&gt; s_type.
          endif.
          concatenate c_quote l_name c_quote c_colon rec_json_string into rec_json_string.
        endif.
        append rec_json_string to json_fragments.
        clear rec_json_string. clear l_name.
        if l_index &lt; l_comps.
          append c_comma to json_fragments.
        endif.
      endloop.
      append &apos;}&apos; to json_fragments.
* &apos;}&apos; JSON object closing curly brace


****************************************************
*                  - Scalars -                     *
****************************************************
    else.
      get_scalar_value l_value &lt;abap_data&gt; l_type.
      append l_value to json_fragments.

    endif.
* End of structure/scalar IF block.
***********************************

  endif.
* End of main IF block.
**********************

* Use a loop in older releases that don&apos;t support concatenate lines.
  concatenate lines of json_fragments into json_string.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2PERL" VERSION="1" LANGU="E" DESCRIPT="Converts ABAP to Perl data dumper representation" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2PERL" SCONAME="ABAP_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2PERL" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Parameter name (isolated scalars and recursive calls)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2PERL" SCONAME="UPCASE" VERSION="1" LANGU="E" DESCRIPT="Put names in upper case (defaults to lower case)" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2PERL" SCONAME="PERL_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2PERL" SCONAME="ERROR_IN_DATA_DESCRIPTION" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <source>method ABAP2PERL.
*/**********************************************/*
*/ This method takes any ABAP data variable and /*
*/ returns a string representing its value in   /*
*/ Perl Data::Dumper format, ready to be evaled /*
*/ in a Perl program.                           /*
*/**********************************************/*

  type-pools: abap.

  constants:
    c_comma type c value &apos;,&apos;,
    c_colon type c value &apos;:&apos;,
    c_quote type c value &apos;&apos;&apos;&apos;.

  data:
    perl_hash_assign type string,
    dont_quote type xfeld,
    perl_fragments type table of string,
    rec_perl_string type string,
    l_type  type c,
    s_type  type c,
    l_comps type i,
    l_lines type i,
    l_index type i,
    l_value type string,
    l_name  type string,
    l_typedescr type ref to cl_abap_structdescr.

  field-symbols:
    &lt;abap_data&gt; type any,
    &lt;itab&gt; type any table,
    &lt;stru&gt; type any table,
    &lt;comp&gt; type any,
    &lt;abapcomp&gt; type abap_compdescr.

  concatenate space &apos;=&gt;&apos; space into perl_hash_assign respecting blanks.

  define get_scalar_value.
    &quot; &amp;1 : assigned var
    &quot; &amp;2 : abap data
    &quot; &amp;3 : abap type
    &amp;1 = &amp;2.
****************************************************
* Adapt some basic ABAP types (pending inclusion of all basic abap types?)
* Feel free to customize this for your needs
    case &amp;3.
*       1. ABAP numeric types
      when &apos;I&apos;. &quot; Integer
        condense &amp;1.
        if &amp;1 &lt; 0.
          shift &amp;1 by 1 places right circular.
        endif.
        dont_quote = &apos;X&apos;.

      when &apos;F&apos;. &quot; Float (pending transformation to Perl float format with no quotes)
*          condense &amp;1.

      when &apos;P&apos;. &quot; Packed number (used in quantities, for example)
        condense &amp;1.

      when &apos;X&apos;. &quot; Hexadecimal
*         &quot; Pending transformation to Perl hex representation.

*       2. ABAP char types
      when &apos;D&apos;. &quot; Date type
        CONCATENATE &amp;1(4) &apos;-&apos; &amp;1+4(2) &apos;-&apos; &amp;1+6(2) INTO &amp;1.

      when &apos;T&apos;. &quot; Time representation
        CONCATENATE &amp;1(2) &apos;:&apos; &amp;1+2(2) &apos;:&apos; &amp;1+4(2) INTO &amp;1.

      when &apos;N&apos;. &quot; Numeric text field
*           condense &amp;1.

      when &apos;C&apos; or &apos;g&apos;. &quot; Char sequences and Strings
* Put safe chars
        replace all occurrences of &apos;&apos;&apos;&apos; in &amp;1 with &apos;\&apos;&apos;&apos; .

      when &apos;y&apos;.  &quot; XSTRING
* Put the XSTRING in Base64
        &amp;1 = cl_http_utility=&gt;ENCODE_X_BASE64( &amp;2 ).

      when others.
* Don&apos;t hesitate to add and modify abap types to suit your taste.

    endcase.
** End of scalar data preparing.

* Enclose value in quotes (or not)
    if dont_quote ne &apos;X&apos;.
      concatenate c_quote &amp;1 c_quote into &amp;1.
    endif.
    clear dont_quote.

  end-of-definition.



***************************************************
*  Prepare field names, we use single quotes.     *
*  You must be strict in what you produce.        *
***************************************************
  if name is not initial.
    concatenate c_quote name c_quote perl_hash_assign into rec_perl_string respecting blanks.
    append rec_perl_string to perl_fragments.
    clear rec_perl_string.
  endif.

**
* Get ABAP data type
  describe field abap_data type l_type components l_comps.

***************************************************
*  Get rid of data references
***************************************************
  if l_type eq cl_abap_typedescr=&gt;typekind_dref.
    assign abap_data-&gt;* to &lt;abap_data&gt;.
    if sy-subrc ne 0.
      append &apos;{}&apos; to perl_fragments.
      concatenate lines of perl_fragments into perl_string.
      exit.
    endif.
  else.
    assign abap_data to &lt;abap_data&gt;.
  endif.


* Get ABAP data type again and start
  describe field &lt;abap_data&gt; type l_type components l_comps.

***************************************************
*  Tables
***************************************************
  if l_type eq cl_abap_typedescr=&gt;typekind_table.
* &apos;[&apos; Table opening bracket
    append &apos;[&apos; to perl_fragments.
    assign &lt;abap_data&gt; to &lt;itab&gt;.
    l_lines = lines( &lt;itab&gt; ).
    loop at &lt;itab&gt; assigning &lt;comp&gt;.
      add 1 to l_index.
*&gt; Recursive call here
      rec_perl_string = abap2perl( abap_data = &lt;comp&gt; upcase = upcase ).
      append rec_perl_string to perl_fragments.
      clear rec_perl_string.
      if l_index &lt; l_lines.
        append c_comma to perl_fragments.
      endif.
    endloop.
    append &apos;]&apos; to perl_fragments.
* &apos;]&apos; Table closing bracket


***************************************************
*  Structures
***************************************************
  else .
    if l_comps is not initial.
* &apos;{&apos; Object opening curly brace
      append &apos;{&apos; to perl_fragments .
      l_typedescr ?= cl_abap_typedescr=&gt;describe_by_data( &lt;abap_data&gt; ) .
      loop at l_typedescr-&gt;components assigning &lt;abapcomp&gt; .
        l_index = sy-tabix .
        assign component &lt;abapcomp&gt;-name of structure &lt;abap_data&gt; to &lt;comp&gt;.
        l_name = &lt;abapcomp&gt;-name.
** ABAP names are usually in caps, set upcase to avoid the conversion to lower case.
        if upcase ne &apos;X&apos;.
          translate l_name to lower case.
        endif.
        describe field &lt;comp&gt; type s_type.
        if s_type eq cl_abap_typedescr=&gt;typekind_table or s_type eq cl_abap_typedescr=&gt;typekind_dref or
           s_type eq cl_abap_typedescr=&gt;typekind_struct1 or s_type eq cl_abap_typedescr=&gt;typekind_struct2.
*&gt; Recursive call for non-scalars:
          rec_perl_string = abap2perl( abap_data = &lt;comp&gt; name = l_name upcase = upcase ).
        else.
          if s_type eq cl_abap_typedescr=&gt;TYPEKIND_OREF or s_type eq cl_abap_typedescr=&gt;TYPEKIND_IREF.
            rec_perl_string = &apos;&quot;REF UNSUPPORTED&quot;&apos;.
          else.
            get_scalar_value rec_perl_string &lt;comp&gt; s_type.
          endif.
          concatenate c_quote l_name c_quote perl_hash_assign rec_perl_string into rec_perl_string.
        endif.

        append rec_perl_string to perl_fragments.
        clear rec_perl_string.
        if l_index &lt; l_comps.
          append c_comma to perl_fragments.
        endif.
      endloop.
      append &apos;}&apos; to perl_fragments.
* &apos;}&apos; Object closing curly brace


****************************************************
*                  - Scalars -                     *
****************************************************
    else.

      get_scalar_value l_value &lt;abap_data&gt; l_type.
      append l_value to perl_fragments.

    endif.
* End of structure/scalar IF block.
***********************************


  endif.
* End of main IF block.
**********************


* Use a loop in older releases that don&apos;t support concatenate lines.
  concatenate lines of perl_fragments into perl_string.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2XML" VERSION="1" LANGU="E" DESCRIPT="Converts ABAP to simple XML" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2XML" SCONAME="ABAP_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2XML" SCONAME="NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2XML" SCONAME="WITH_XML_HEADER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2XML" SCONAME="UPCASE" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2XML" SCONAME="NAME_ATR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2XML" SCONAME="XML_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method ABAP2XML.
*
*/ Look at method serialize_id for a new way of doing XML.

  type-pools: abap.

  constants:
    xml_head type string value &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&apos;,
    item_atr type string value &apos;idx=&quot;#&quot;&apos;.

  data:
    xml_fragments type table of string,
    rec_xml_string type string,
    l_type  type c,
    s_type  type c,
    l_comps type i,
    l_value type string,
    t_string type string,
    l_item_atr type string,
    l_item_str type string,
    l_name type string,
    l_idx type string,
    l_typedescr type ref to cl_abap_structdescr,
    l_linedescr type ref to cl_abap_datadescr,
    l_tabledescr type ref to cl_abap_tabledescr.

  field-symbols:
    &lt;abap_data&gt; type any,
    &lt;itab&gt; type any table,
    &lt;stru&gt; type any table,
    &lt;comp&gt; type any,
    &lt;abapcomp&gt; type abap_compdescr.

  define get_scalar_value.
    &quot; &amp;1 : assigned var
    &quot; &amp;2 : abap data
    &quot; &amp;3 : abap type
    &amp;1 = &amp;2.
****************************************************
* Adapt some basic ABAP types (pending inclusion of all basic abap types?)
* Feel free to customize this for your needs
    case &amp;3.
*       1. ABAP numeric types
      when &apos;I&apos;. &quot; Integer
        condense &amp;1.
        if &amp;1 &lt; 0.
          shift &amp;1 by 1 places right circular.
        endif.

      when &apos;F&apos;. &quot; Float (one day check correct XML representation)
*          condense &amp;1.

      when &apos;P&apos;. &quot; Packed number (used in quantities, for example)
        condense &amp;1.

      when &apos;X&apos;. &quot; Hexadecimal
*         &quot; One day I&apos;ll check correct XML representation.

*       2. ABAP char types
      when &apos;D&apos;. &quot; Date type
        CONCATENATE &amp;1(4) &apos;-&apos; &amp;1+4(2) &apos;-&apos; &amp;1+6(2) INTO &amp;1.

      when &apos;T&apos;. &quot; Time representation
        CONCATENATE &amp;1(2) &apos;:&apos; &amp;1+2(2) &apos;:&apos; &amp;1+4(2) INTO &amp;1.

      when &apos;N&apos;. &quot; Numeric text field
*           condense &amp;1.

      when &apos;C&apos; or &apos;g&apos;. &quot; Char sequences and Strings
* Put safe chars
        t_string = &amp;2.
        &amp;1 = cl_http_utility=&gt;escape_html( t_string ).

      when &apos;y&apos;.  &quot; XSTRING
* Put the XSTRING in Base64
        &amp;1 = cl_http_utility=&gt;ENCODE_X_BASE64( &amp;2 ).

      when others.
* Don&apos;t hesitate to add and modify abap types to suit your taste.

    endcase.
** End of scalar data preparing.

  end-of-definition.



*******************************
* Put XML header if requested *
*******************************
  if with_xml_header eq abap_true.
    append xml_head to xml_fragments.
  endif.

***************************************************
*  Open XML tag                                   *
*  &lt;          &gt;                                   *
***************************************************
  if name is not initial.
    l_name = name.
    if name_atr is not initial.
      concatenate name name_atr into l_name separated by space.
    endif.
    concatenate &apos;&lt;&apos; l_name &apos;&gt;&apos; into rec_xml_string.
    append rec_xml_string to xml_fragments.
    clear rec_xml_string.
  endif.

**
* Get ABAP data type
  describe field abap_data type l_type components l_comps .

***************************************************
*  Get rid of data references
***************************************************
  if l_type eq cl_abap_typedescr=&gt;typekind_dref.
    assign abap_data-&gt;* to &lt;abap_data&gt;.
    if sy-subrc ne 0.
      if name is not initial.
        concatenate &apos;&lt;&apos; name &apos;/&gt;&apos; into xml_string.
      else.
        clear xml_string.
      endif.
      exit.
    endif.
  else.
    assign abap_data to &lt;abap_data&gt;.
  endif.


* Get ABAP data type again and start
  describe field &lt;abap_data&gt; type l_type components l_comps.


***************************************************
*  Tables
***************************************************
  if l_type eq cl_abap_typedescr=&gt;typekind_table.
    l_tabledescr ?= cl_abap_typedescr=&gt;describe_by_data( &lt;abap_data&gt; ).
    l_linedescr = l_tabledescr-&gt;get_table_line_type( ).
    l_item_str = l_linedescr-&gt;get_relative_name( ).
    assign &lt;abap_data&gt; to &lt;itab&gt;.
    loop at &lt;itab&gt; assigning &lt;comp&gt;.
      l_idx = sy-tabix.
      condense l_idx.
      l_item_atr = item_atr.
      replace &apos;#&apos; in l_item_atr with l_idx.
      if upcase ne &apos;X&apos;.
        translate l_item_str to lower case.
      endif.
*&gt; Recursive call for line items here:
      rec_xml_string = abap2xml( abap_data = &lt;comp&gt; upcase = upcase name = l_item_str name_atr = l_item_atr ).
      append rec_xml_string to xml_fragments.
      clear rec_xml_string.
    endloop.


***************************************************
*  Structures
***************************************************
  else .
    if l_comps is not initial.
      l_typedescr ?= cl_abap_typedescr=&gt;describe_by_data( &lt;abap_data&gt; ).
      loop at l_typedescr-&gt;components assigning &lt;abapcomp&gt; .
        assign component &lt;abapcomp&gt;-name of structure &lt;abap_data&gt; to &lt;comp&gt;.
        l_name = &lt;abapcomp&gt;-name. &quot; l_value justs holds the name here.
** ABAP names are usually in caps, set upcase to avoid the conversion to lower case.
        if upcase ne &apos;X&apos;.
          translate l_name to lower case.
        endif.
        describe field &lt;comp&gt; type s_type.
        if s_type eq cl_abap_typedescr=&gt;typekind_table or s_type eq cl_abap_typedescr=&gt;typekind_dref or
           s_type eq cl_abap_typedescr=&gt;typekind_struct1 or s_type eq cl_abap_typedescr=&gt;typekind_struct2.
*&gt; Recursive call for non-scalars:
          rec_xml_string = abap2xml( abap_data = &lt;comp&gt; name = l_name upcase = upcase ).
        else.
          if s_type eq cl_abap_typedescr=&gt;TYPEKIND_OREF or s_type eq cl_abap_typedescr=&gt;TYPEKIND_IREF.
            rec_xml_string = &apos;REF UNSUPPORTED&apos;.
          else.
            get_scalar_value rec_xml_string &lt;comp&gt; s_type.
          endif.
          concatenate &apos;&lt;&apos; l_name &apos;&gt;&apos; rec_xml_string &apos;&lt;/&apos; l_name &apos;&gt;&apos; into rec_xml_string.
        endif.
        append rec_xml_string to xml_fragments.
        clear rec_xml_string.
      endloop.



****************************************************
*                  - Scalars -                     *
****************************************************
    else.

      get_scalar_value l_value &lt;abap_data&gt; l_type.
      append l_value to xml_fragments.

    endif.
* End of structure/scalar IF block.
***********************************


  endif.
* End of main IF block.
**********************


*****************
* Close XML tag *
*****************
  if name is not initial.
    concatenate &apos;&lt;/&apos; name &apos;&gt;&apos; into rec_xml_string.
    append rec_xml_string to xml_fragments.
    clear rec_xml_string.
  endif.

* Use a loop in older releases that don&apos;t support concatenate lines.
  concatenate lines of xml_fragments into xml_string.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" VERSION="1" LANGU="E" DESCRIPT="Converts ABAP to YAML" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="ABAP_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Parameter name for isolated scalars (mostly)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="UPCASE" VERSION="1" LANGU="E" DESCRIPT="Put names in upper case (optional)" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="Y_LEVEL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="S_INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="FIRST_ROW" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="DONT_INDENT" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="YAML_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="ABAP2YAML" SCONAME="ERROR_IN_DATA_DESCRIPTION" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <source>method ABAP2YAML.
*********************
* ABAP goes to YAML *
*********************

  type-pools: abap.

  constants:
    c_comma     type c value &apos;,&apos;,
    c_space     type c value &apos; &apos;,
    c_colon     type c value &apos;:&apos;,
    c_quote     type c value &apos;&quot;&apos;,
    c_squot     type c value &apos;&apos;&apos;&apos;,
    c_colo2(2)  type c value &apos;: &apos;,
    c_indt2     type i value 2,
    c_hyph      type c value &apos;-&apos;.

  data:
  ly_level type i,
  l_dont_indent type xfeld,
  dec_level type i value 0,
  dont_quote type xfeld,
  yaml_fragments type table of string,
  rec_yaml_string type string,
  l_type  type c ,
  l_comps type i ,
  l_lines type i ,
  l_index type i ,
  l_value type string,
  l_name type string.
  field-symbols:
    &lt;abap_data&gt; type any,
    &lt;itab&gt; type any table,
    &lt;stru&gt; type any table,
    &lt;comp&gt; type any.
  data l_typedescr type ref to cl_abap_structdescr .
  field-symbols &lt;abapcomp&gt; type abap_compdescr .

  ly_level = y_level.

**
* Get ABAP data type
  describe field abap_data type l_type components l_comps .

***************************************************
*  First of all, get rid of data references
***************************************************
  if l_type eq cl_abap_typedescr=&gt;typekind_dref.
    assign abap_data-&gt;* to &lt;abap_data&gt;.
    if sy-subrc ne 0.
      yaml_string = space. &quot; pasamos de poner nada si falla...
      exit.
    endif.
  else.
    assign abap_data to &lt;abap_data&gt;.
  endif.


* Get ABAP data type again and start
  describe field &lt;abap_data&gt; type l_type components l_comps.

***************************************************
*  Prepare field names, YAML does not quote names *
***************************************************
* Put hyphens...
  if name is initial and y_level gt 0.
    concatenate c_hyph space into rec_yaml_string respecting blanks.
    l_dont_indent = &apos;X&apos;.
  endif.

  if name is not initial.
    concatenate name c_colon c_space into rec_yaml_string respecting blanks.
  endif.

* do indent
  if dont_indent ne &apos;X&apos;.
    do  ly_level  times.
      shift rec_yaml_string right by c_indt2 places.
    enddo.
  endif.

  append rec_yaml_string to yaml_fragments.
  clear rec_yaml_string.




***************************************************
*  Tables
***************************************************
  if l_type eq cl_abap_typedescr=&gt;TYPEKIND_TABLE.
    assign &lt;abap_data&gt; to &lt;itab&gt;.
    l_lines = lines( &lt;itab&gt; ).
    clear l_index.
    if l_lines eq 0.
      move &apos;[]&apos; to rec_yaml_string.
      append rec_yaml_string to yaml_fragments.
      clear rec_yaml_string.
      append xnl to yaml_fragments.
    else.
      if name is not initial.
        append xnl to yaml_fragments.
      endif.
      add 1 to ly_level.
      loop at &lt;itab&gt; assigning &lt;comp&gt;.
        add 1 to l_index.
*&gt; Recursive call here
        rec_yaml_string = abap2yaml( abap_data = &lt;comp&gt; upcase = upcase y_level = ly_level s_index = l_index ).
        append rec_yaml_string to yaml_fragments.
        clear rec_yaml_string.
      endloop.
    endif.
* YAML table ends *
*******************


***************************************************
*  Structures
***************************************************
  else .
    if l_comps is not initial.
      if name is not initial.
        append xnl to yaml_fragments.
      endif.
      add 1 to ly_level.
* Loop for structure elements
      l_typedescr ?= cl_abap_typedescr=&gt;describe_by_data( &lt;abap_data&gt; ) .
      clear l_index.
      loop at l_typedescr-&gt;components assigning &lt;abapcomp&gt;.
        add 1 to l_index.
        assign component &lt;abapcomp&gt;-name of structure &lt;abap_data&gt; to &lt;comp&gt;.
        l_name = &lt;abapcomp&gt;-name.
** ABAP names are usually in caps, set upcase to avoid the conversion to lower case.
        if upcase ne &apos;X&apos;.
          translate l_name to lower case.
        endif.
*&gt; Recursive call here
        rec_yaml_string = abap2yaml( abap_data = &lt;comp&gt; name = l_name upcase = upcase y_level = ly_level s_index = l_index dont_indent = l_dont_indent ).
        clear l_dont_indent. &quot; it is only used once
        append rec_yaml_string to yaml_fragments.
        clear rec_yaml_string.
      endloop.

* YAML structure ends *
***********************


***************************************************
*  Scalars and others...
***************************************************
    else.
      if l_type eq cl_abap_typedescr=&gt;TYPEKIND_OREF or l_type eq cl_abap_typedescr=&gt;TYPEKIND_IREF.
        l_value = &apos;REF UNSUPPORTED&apos;.
      else.
        l_value = &lt;abap_data&gt;.
      endif.

* Adapt some basic ABAP types (pending inclusion of all basic abap types)
* Feel free to customize this for your needs
      case l_type.
*       1. ABAP numeric types
        when &apos;I&apos;. &quot; Integer
          condense l_value.
          if l_value &lt; 0.
            shift l_value by 1 places right circular.
          endif.
          dont_quote = &apos;X&apos;.

        when &apos;F&apos;. &quot; Float (pending transformation to JSON float format with no quotes)
*          condense l_value.

        when &apos;P&apos;. &quot; Packed number (used in quantities, for example)
          condense l_value.

        when &apos;X&apos;. &quot; Hexadecimal
*         &quot; Leave it as is, as JSON doesn&apos;t support Hex or Octal.

*       2. ABAP char types
        when &apos;D&apos;. &quot; Date type
          CONCATENATE l_value(4) &apos;-&apos; l_value+4(2) &apos;-&apos; l_value+6(2) INTO l_value.

        when &apos;T&apos;. &quot; Time representation
          CONCATENATE l_value(2) &apos;:&apos; l_value+2(2) &apos;:&apos; l_value+4(2) INTO l_value.

        when &apos;N&apos;. &quot; Numeric text field
*           condense l_value.

        when &apos;C&apos; or &apos;g&apos;. &quot; Chars and Strings
* Put safe chars
          replace all occurrences of &apos;\&apos; in l_value with &apos;\\&apos; .
          replace all occurrences of &apos;&quot;&apos; in l_value with &apos;\&quot;&apos; .
          replace all occurrences of cl_abap_char_utilities=&gt;cr_lf in l_value with &apos;\r\n&apos; .
          replace all occurrences of cl_abap_char_utilities=&gt;newline in l_value with &apos;\n&apos; .
          replace all occurrences of cl_abap_char_utilities=&gt;horizontal_tab in l_value with &apos;\t&apos; .
          replace all occurrences of cl_abap_char_utilities=&gt;backspace in l_value with &apos;\b&apos; .
          replace all occurrences of cl_abap_char_utilities=&gt;form_feed in l_value with &apos;\f&apos; .

        when &apos;y&apos;.  &quot; XSTRING
* Put the XSTRING in Base64
*          l_value = cl_http_utility=&gt;ENCODE_X_BASE64( &lt;abap_data&gt; ).
          l_value = &apos;XSTRING not supported in YAML yet!&apos;.

        when others.
* Don&apos;t hesitate to add and modify abap types to suit your taste.

      endcase.

* We use YAML scalars double quoted
      if dont_quote ne &apos;X&apos;.
        concatenate c_quote l_value c_quote into l_value.
      else.
        clear dont_quote.
      endif.

      append l_value to yaml_fragments.

      append xnl to yaml_fragments.

    endif. &quot; is structure or scalar

  endif. &quot; main typekind sentence



* Use a loop in older releases that don&apos;t support concatenate lines.
  concatenate lines of yaml_fragments into yaml_string respecting blanks.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="BUILD_PARAMS" VERSION="1" LANGU="E" DESCRIPT="Builds params for function call" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="BUILD_PARAMS" SCONAME="FUNCTION_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L_FNAM"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="BUILD_PARAMS" SCONAME="PARAMTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND_TAB"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="BUILD_PARAMS" SCONAME="EXCEPTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_EXCPBIND_TAB"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="BUILD_PARAMS" SCONAME="PARAMS" VERSION="1" LANGU="E" DESCRIPT="Should be type table of RFC_FINT_P" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="BUILD_PARAMS" SCONAME="INVALID_FUNCTION" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="BUILD_PARAMS" SCONAME="UNSUPPORTED_PARAM_TYPE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <source>method BUILD_PARAMS.

  type-pools: ABAP.

  data defval type RS38L_DEFO.
  data dataname type string.
  data waref type ref to data.

  field-symbols:
    &lt;wa&gt; type any,
    &lt;temp&gt; type any.

  data len type i.
  data excnt type i value 1.

  data paramline  type line  of ABAP_FUNC_PARMBIND_TAB.
  data exceptline type line  of ABAP_FUNC_EXCPBIND_TAB.
  data t_params_p type table of RFC_FINT_P.
  data params_p   type RFC_FINT_P.

  define remove_enclosing_quotes.
    &quot; Remove enclosing single quotes
    if &amp;2 gt 1.
      subtract 1 from &amp;2.
      if &amp;1+&amp;2 eq &apos;&apos;&apos;&apos;.
        &amp;1+&amp;2 = space.
      endif.
      if &amp;1(1) eq &apos;&apos;&apos;&apos;.
        shift &amp;1 left.
      endif.
      &amp;2 = strlen( &amp;1 ).
    endif.
  end-of-definition.


* do we have the rfc name?
  call function &apos;RFC_GET_FUNCTION_INTERFACE_P&apos;
    EXPORTING
      funcname      = function_name
      language      = &apos;E&apos;       &quot;&apos;D&apos;  &quot;sy-langu
    TABLES
      params_p      = t_params_p
    EXCEPTIONS
      fu_not_found  = 1
      nametab_fault = 2
      others        = 3.

  if sy-subrc &lt;&gt; 0.
    raise INVALID_FUNCTION.
  endif.


* Build params table
  loop at t_params_p into params_p.

    unassign &lt;wa&gt;.
    unassign &lt;temp&gt;.
    clear paramline.

    case params_p-paramclass.

      when &apos;I&apos; or &apos;E&apos; or &apos;C&apos;.

        paramline-name = params_p-parameter.

        if params_p-paramclass = &apos;E&apos;.
          paramline-kind = ABAP_FUNC_IMPORTING.
        elseif params_p-paramclass = &apos;I&apos;.
          paramline-kind = ABAP_FUNC_EXPORTING.
        else.
          paramline-kind = ABAP_FUNC_CHANGING.
        endif.

        if params_p-fieldname is initial.
          dataname = params_p-tabname.
        else.
          concatenate params_p-tabname params_p-fieldname into
              dataname separated by &apos;-&apos;.
        endif.

* Assign default values
        defval = params_p-default.
        if dataname is initial.
           dataname = &apos;STRING&apos;.  &quot; use a STRING for this cases (see CONVERT_DATE_TO_EXTERNAL).
        endif.
        create data waref type (dataname).
        assign waref-&gt;* to &lt;wa&gt;.
        len = strlen( defval ).
        remove_enclosing_quotes defval len.
        if defval = &apos;SPACE&apos;.
          &lt;wa&gt; = space.
        elseif len &gt; 3 and defval+0(3) = &apos;SY-&apos;.
          assign (defval) to &lt;temp&gt;.
          &lt;wa&gt; = &lt;temp&gt;.
          unassign &lt;temp&gt;.
        else.
          if defval is not initial.
            &lt;wa&gt; = defval.
          endif.
        endif.
        unassign &lt;wa&gt;.
        paramline-value = waref.
        insert paramline into table paramtab.

      when &apos;T&apos;.
        paramline-name = params_p-parameter.
        paramline-kind = ABAP_FUNC_TABLES.
        if params_p-exid eq &apos;h&apos;.
          create data waref type (params_p-tabname).
        else.
          create data waref type standard table of (params_p-tabname).
        endif.
        paramline-value = waref.
        insert paramline into table paramtab.

      when &apos;X&apos;.
        exceptline-name = params_p-parameter.
        exceptline-value = excnt.
        data messg type ref to data.
        create data messg type string.
        assign messg-&gt;* to &lt;temp&gt;.
        &lt;temp&gt; = params_p-paramtext.
        exceptline-message = messg.
        insert exceptline into table exceptab.
        add 1 to excnt.

      when others.
        raise UNSUPPORTED_PARAM_TYPE.

    endcase.

  endloop.


* add in the catch all exception
  exceptline-name = &apos;OTHERS&apos;.
  exceptline-value = excnt.
  insert exceptline into table exceptab.


* return
  params = t_params_p.

*********************************
******* Remaining from 2006 *****
******* end of build_params *****
*********************************
endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="DESERIALIZE_ID" VERSION="1" LANGU="E" DESCRIPT="Converts JSON data to ABAP using transformation id" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="DESERIALIZE_ID" SCONAME="JSON" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="DESERIALIZE_ID" SCONAME="PARAMTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND_TAB"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="DESERIALIZE_ID" SCONAME="ZCX_JSON" VERSION="1" LANGU="E" DESCRIPT="JSON handler errors" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <source>method DESERIALIZE_ID.
**/***********************************************************/*
**/ New method using the built-in transformation              /*
**/ included in releases 7.02 and 7.03/7.31 (Kernelpatch 116) /*
**/***********************************************************/*
*
*  type-pools: ABAP.
*
*** Remember function parameter types
***constants:
***  abap_func_exporting type abap_func_parmbind-kind value 10,
***  abap_func_importing type abap_func_parmbind-kind value 20,
***  abap_func_tables    type abap_func_parmbind-kind value 30,
***  abap_func_changing  type abap_func_parmbind-kind value 40.
*
*  data:
*    rtab type ABAP_TRANS_RESBIND_TAB,
*    rlin type abap_trans_resbind,
*    oexcp type ref to cx_root,
*    etext type string.
*
*  field-symbols &lt;parm&gt; type abap_func_parmbind.
*
*  if json is initial. exit. endif.  &quot; exit method if there is nothing to parse
*
*  loop at paramtab assigning &lt;parm&gt;.
*    if &lt;parm&gt;-kind eq abap_func_importing. &quot;&quot; va al revés, cuidado!!!
*      continue.
*    endif.
*    rlin-name  = &lt;parm&gt;-name.
*    rlin-value = &lt;parm&gt;-value.
*    append rlin to rtab.
*  endloop.
*
*
*  try.
*
*      CALL TRANSFORMATION id SOURCE XML json
*                             RESULT (rtab).
*
*    catch cx_root into oexcp.
*
*      etext = oexcp-&gt;if_message~get_text( ).
*      RAISE EXCEPTION type zcx_json
*        EXPORTING
*          message = etext.
*
*  endtry.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON2ABAP" VERSION="1" LANGU="E" DESCRIPT="Puts JSON into ABAP data using JavaScript" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON2ABAP" SCONAME="JSON_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON2ABAP" SCONAME="VAR_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON2ABAP" SCONAME="PROPERTY_PATH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="&apos;json_obj&apos;"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON2ABAP" SCONAME="PROPERTY_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="JS_PROPERTY_TAB"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON2ABAP" SCONAME="JS_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Integrated Java Script Engine" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_JAVA_SCRIPT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON2ABAP" SCONAME="ABAP_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON2ABAP" SCONAME="ZCX_JSON" VERSION="1" LANGU="E" DESCRIPT="JSON handler errors" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <source>method JSON2ABAP.
*/************************************************/*
*/ Input any abap data and this method tries to   /*
*/ fill it with the data in the JSON string.      /*
*/  Thanks to Juan Diaz for helping here!!        /*
*/************************************************/*

  type-pools: abap, js.

  data:
    js_script type string,
    js_started type i value 0,
    l_json_string type string,
    js_property_table type   js_property_tab,
    js_property type line of js_property_tab,
    l_property_path type string,
    compname type string,
    item_path type string.

  data:
    l_type  type c,
    l_value type string,
    linetype type string,
    l_comp type line of ABAP_COMPDESCR_TAB.

  data:
    datadesc type ref to CL_ABAP_TYPEDESCR,
    drefdesc type ref to CL_ABAP_TYPEDESCR,
    linedesc type ref to CL_ABAP_TYPEDESCR,
    strudesc type ref to CL_ABAP_STRUCTDESCR,
    tabldesc type ref to CL_ABAP_TABLEDESCR.

  data newline type ref to data.

  field-symbols:
    &lt;abap_data&gt; type any,
    &lt;itab&gt; type any table,
    &lt;comp&gt; type any,
    &lt;jsprop&gt; type line of js_property_tab,
    &lt;abapcomp&gt; type abap_compdescr.


  define assign_scalar_value.
    &quot;   &amp;1   &lt;abap_data&gt;
    &quot;   &amp;2   js_property-value
    describe field &amp;1 type l_type.
    l_value = &amp;2.
* convert or adapt scalar values to ABAP.
    case l_type.
      when &apos;D&apos;. &quot; date type
        if l_value cs &apos;-&apos;.
          replace all occurrences of &apos;-&apos; in l_value with space.
          condense l_value no-gaps.
        endif.
      when &apos;T&apos;. &quot; time type
        if l_value cs &apos;:&apos;.
          replace all occurrences of &apos;:&apos; in l_value with space.
          condense l_value no-gaps.
        endif.
      when others.
        &quot; may be other conversions or checks could be implemented here.
    endcase.
    &amp;1 = l_value.
  end-of-definition.


  if js_object is not bound.

    if json_string is initial. exit. endif. &quot; exit method if there is nothing to parse

    l_json_string = json_string.
    js_object = cl_java_script=&gt;create( ).

***************************************************
*  Parse JSON using JavaScript                    *
***************************************************
    js_object-&gt;bind( exporting name_obj = &apos;abap_data&apos; name_prop = &apos;json_string&apos;    changing data = l_json_string ).
    js_object-&gt;bind( exporting name_obj = &apos;abap_data&apos; name_prop = &apos;script_started&apos; changing data = js_started ).

* We use the JavaScript engine included in ABAP to read the JSON string.
* We simply use the recommended way to eval a JSON string as specified
* in RFC 4627 (http://www.ietf.org/rfc/rfc4627.txt).
*
* Security considerations:
*
*   Generally there are security issues with scripting languages.  JSON
*   is a subset of JavaScript, but it is a safe subset that excludes
*   assignment and invocation.
*
*   A JSON text can be safely passed into JavaScript&apos;s eval() function
*   (which compiles and executes a string) if all the characters not
*   enclosed in strings are in the set of characters that form JSON
*   tokens.  This can be quickly determined in JavaScript with two
*   regular expressions and calls to the test and replace methods.
*
*      var my_JSON_object = !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(
*             text.replace(/&quot;(\\.|[^&quot;\\])*&quot;/g, &apos;&apos;))) &amp;&amp;
*         eval(&apos;(&apos; + text + &apos;)&apos;);

    concatenate

         &apos;var json_obj; &apos;
         &apos;var json_text; &apos;

         &apos;function start() { &apos;
         &apos;  if(abap_data.script_started) { return; } &apos;
         &apos;  json_text = abap_data.json_string;&apos;
         &apos;  json_obj = !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test( &apos;
         &apos;      json_text.replace(/&quot;(\\.|[^&quot;\\])*&quot;/g, &apos;&apos;&apos;&apos;))) &amp;&amp; &apos;
         &apos;    eval(&apos;&apos;(&apos;&apos; + json_text + &apos;&apos;)&apos;&apos;); &apos;
         &apos;  abap_data.script_started = 1; &apos;
         &apos;} &apos;

         &apos;if(!abap_data.script_started) start(); &apos;


       into js_script respecting blanks separated by xnl.

    js_object-&gt;compile( script_name = &apos;json_parser&apos;     script = js_script ).
    js_object-&gt;execute( script_name = &apos;json_parser&apos; ).

    if js_object-&gt;last_error_message is not initial.
      RAISE EXCEPTION type zcx_json
        EXPORTING
          message = js_object-&gt;last_error_message.
    endif.

  endif.
** End of JS processing.

**
  if var_name is not initial.
    concatenate property_path var_name into l_property_path separated by &apos;.&apos;.
  else.
    l_property_path = property_path.
  endif.
**

**
  js_property_table = js_object-&gt;get_properties_scope_global( property_path = l_property_path ).
  property_table = js_property_table.
  if l_property_path eq &apos;json_obj&apos;. exit. endif.  &quot; Just get top level properties and return

*
* Get ABAP data type, dereference if necessary and start
  datadesc = cl_abap_typedescr=&gt;DESCRIBE_BY_DATA( abap_data ).
  if datadesc-&gt;kind eq cl_abap_typedescr=&gt;kind_ref.
    assign abap_data-&gt;* to &lt;abap_data&gt;.
  else.
    assign abap_data to &lt;abap_data&gt;.
  endif.
  datadesc = cl_abap_typedescr=&gt;DESCRIBE_BY_DATA( &lt;abap_data&gt; ).


  case datadesc-&gt;kind.

    when cl_abap_typedescr=&gt;kind_elem.
* Scalar: process ABAP elements. Assume no type conversions for the moment.
      if var_name is initial.
        RAISE EXCEPTION type zcx_json
          EXPORTING
            message = &apos;VAR_NAME is required for scalar values.&apos;.
      endif.
      js_property_table = js_object-&gt;get_properties_scope_global( property_path = property_path ).
      read table js_property_table with key name = var_name into js_property.
      if sy-subrc eq 0.
        assign_scalar_value &lt;abap_data&gt; js_property-value.
      endif.


    when cl_abap_typedescr=&gt;kind_struct.
* Process ABAP structures
      strudesc ?= datadesc.
      loop at js_property_table assigning &lt;jsprop&gt;.
        compname = &lt;jsprop&gt;-name.
        translate compname to upper case.
        read table strudesc-&gt;COMPONENTS with key name = compname into l_comp.
        if sy-subrc eq 0.
          assign component l_comp-name of structure &lt;abap_data&gt; to &lt;comp&gt;.
          case l_comp-type_kind.
            when    cl_abap_typedescr=&gt;TYPEKIND_STRUCT1  &quot; &apos;v&apos;
                 or cl_abap_typedescr=&gt;TYPEKIND_STRUCT2  &quot; &apos;u&apos;
                 or cl_abap_typedescr=&gt;TYPEKIND_TABLE.   &quot; &apos;h&apos; (may need a different treatment one day)
              concatenate l_property_path &lt;jsprop&gt;-name into item_path separated by &apos;.&apos;.
*&gt; Recursive call here
              json2abap( exporting property_path = item_path changing abap_data = &lt;comp&gt; js_object = js_object ).

            when others.
* Process scalars in structures (same as the kind_elem above)
              assign_scalar_value &lt;comp&gt; &lt;jsprop&gt;-value.

          endcase.
        endif.
      endloop.

    when cl_abap_typedescr=&gt;kind_table.
* Process ABAP tables
      if js_property_table is not initial.
        tabldesc ?= datadesc.
        linedesc = tabldesc-&gt;get_table_line_type( ).
        linetype = linedesc-&gt;get_relative_name( ).
        assign &lt;abap_data&gt; to &lt;itab&gt;.
        DELETE js_property_table WHERE kind NE &apos;O&apos;.
        loop at js_property_table into js_property.
          create data newline type (linetype).
          concatenate l_property_path js_property-name into item_path separated by &apos;.&apos;.
          condense item_path.
*&gt; Recursive call here
          json2abap( exporting property_path = item_path changing abap_data = newline js_object = js_object ).
          assign newline-&gt;* to &lt;comp&gt;.
          insert &lt;comp&gt; into table &lt;itab&gt;.
          free newline.
        endloop.
      endif.

    when others. &quot; kind_class, kind_intf
      &quot; forget it.

  endcase.


endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON_DESERIALIZE" VERSION="1" LANGU="E" DESCRIPT="Converts JSON data to ABAP using JavaScript" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON_DESERIALIZE" SCONAME="JSON" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON_DESERIALIZE" SCONAME="PARAMTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND_TAB"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="JSON_DESERIALIZE" SCONAME="ZCX_JSON" VERSION="1" LANGU="E" DESCRIPT="JSON handler errors" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <source>method JSON_DESERIALIZE.

  type-pools: ABAP, JS.

** Remember function parameter types
**constants:
**  abap_func_exporting type abap_func_parmbind-kind value 10,
**  abap_func_importing type abap_func_parmbind-kind value 20,
**  abap_func_tables    type abap_func_parmbind-kind value 30,
**  abap_func_changing  type abap_func_parmbind-kind value 40.

  data paramname   type string.
  data js_obj      type ref to cl_java_script.
  data js_prop_tab type js_property_tab.

  field-symbols &lt;js_prop&gt; type line of js_property_tab.
  field-symbols &lt;parm&gt;    type abap_func_parmbind.

  if json is initial. exit. endif.

  json2abap( exporting json_string = json  importing property_table = js_prop_tab  changing js_object = js_obj ).

  loop at js_prop_tab assigning &lt;js_prop&gt;.
    paramname = &lt;js_prop&gt;-name.
    translate paramname to upper case.
    read table paramtab with key name = paramname assigning &lt;parm&gt;.
    if sy-subrc eq 0.
      if &lt;parm&gt;-kind ne abap_func_importing. &quot;&quot; va al revés, cuidado!!!
        json2abap( exporting var_name = &lt;js_prop&gt;-name  changing abap_data = &lt;parm&gt;-value js_object = js_obj ).
      endif.
    endif.
  endloop.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="NOTES" VERSION="1" LANGU="E" DESCRIPT="Info notes" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="NOTES" SCONAME="TEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method NOTES.

data location type string.

concatenate me-&gt;my_url me-&gt;my_service &apos;/RFC_SYSTEM_INFO&apos; into location.

concatenate

&apos;&lt;html&gt;&lt;head&gt;&lt;title&gt;JSON (NEW) handler notes&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&apos;

&apos;&lt;h4&gt;About this service...&lt;/h4&gt;&apos;
&apos;This is the ABAP implementation of a conversion program that&apos;
&apos; tranforms ABAP data into a &lt;a href=&quot;http://www.json.org&quot;&gt;JSON&lt;/a&gt; representation.&apos;
&apos;&lt;p&gt;&apos;
&apos;It provides a user interface in the form of a ICF service that &apos;
&apos;allows web invocation of ABAP function modules. It doesn&apos;&apos;t matter if they are RFC enabled or not.&apos;
&apos;&lt;p&gt;In this system this service has &apos;
&apos;been assigned to ICF service &lt;a href=&quot;&apos; me-&gt;my_url me-&gt;my_service &apos;&quot;&gt;&apos; me-&gt;my_service &apos;&lt;/a&gt;.&apos;
&apos;&lt;p&gt;&apos;
&apos;In order to invoke a function module, just put its name in the PATH_INFO &apos;
&apos;of the service URL, as is shown in the following examples.&apos;

&apos;&lt;p&gt;Try the following link to do the default call in JSON format:&lt;pre&gt;&lt;a href=&quot;&apos; location &apos;?format=json&quot;&gt;&apos;
location
&apos;?format=json&lt;/a&gt;&lt;/pre&gt;&apos;

&apos;&lt;p&gt;A simple syntax allows to get the output in different formats.&lt;p&gt;&apos;

&apos;The following gets the output in &lt;a href=&quot;http://yaml.org&quot;&gt;YAML&lt;/a&gt; format:&apos;
&apos;&lt;pre&gt;&lt;a href=&quot;&apos; location &apos;?format=yaml&quot;&gt;&apos;
location
&apos;?format=yaml&lt;/a&gt;&lt;/pre&gt;&apos;
&apos;&apos;
&apos;&lt;p&gt;And this will get the output in a basic XML representation: &lt;pre&gt;&lt;a href=&quot;&apos; location &apos;?format=xml&quot;&gt;&apos;
location
&apos;?format=xml&lt;/a&gt;&lt;/pre&gt;&apos;

&apos;&lt;p&gt;And, just for fun, getting it into Perl format could be handy: &lt;pre&gt;&lt;a href=&quot;&apos; location &apos;?format=perl&quot;&gt;&apos;
location
&apos;?format=perl&lt;/a&gt;&lt;/pre&gt;&apos;

&apos;&lt;p&gt;Finnally, you can add a callback to get the JSON response enclosed in a javascript function call,&apos;
&apos; in order to allow a &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; style response: &apos;
&apos;&lt;pre&gt;&lt;a href=&quot;&apos;
location &apos;?format=json&amp;callback=callMe&quot;&gt;&apos;
location &apos;?format=json&amp;callback=callMe&lt;/a&gt;&lt;/pre&gt;&apos;

&apos;&lt;hr&gt;&lt;h4&gt;WARNING&lt;/h4&gt;This is work in progress and may not be suitable for use in productive &apos;
&apos;systems. The interface is somewhat unstable. Please feel free to test it and report  &apos;
&apos;any bug and improvement you may find.&apos;
&apos;&lt;p&gt;Use it at your own risk!&apos;
&apos;&lt;p&gt;For more information: &lt;a href=&quot;https://cw.sdn.sap.com/cw/groups/json-adapter-for-abap-function-modules&quot;&gt;&apos;
&apos;https://cw.sdn.sap.com/cw/groups/json-adapter-for-abap-function-modules&lt;/a&gt;&apos;
&apos;&lt;p&gt;&apos;
&apos;If you have any questions, please contact me at &lt;a href=&quot;mailto:cesar.martin@sap.com&quot;&gt;&apos;
&apos;cesar.martin@sap.com&lt;/a&gt;&apos;
&apos;&lt;p&gt;&apos;


&apos;&lt;hr&gt;&lt;/body&gt;&lt;/html&gt;&apos;


into text RESPECTING BLANKS.


endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" VERSION="1" LANGU="E" DESCRIPT="Serialize function data to JSON/XML using transformation id" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="PARAMTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND_TAB"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="PARAMS" VERSION="1" LANGU="E" DESCRIPT="Should be type table of RFC_FINT_P" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="EXCEPTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_EXCPBIND_TAB" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="SHOW_IMPP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="JSONP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="LOWERCASE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="FORMAT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="&apos;JSON&apos;"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="FUNCNAME" VERSION="1" LANGU="E" DESCRIPT="Name of Function Module" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L_FNAM" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="O_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_ID" SCONAME="ZCX_JSON" VERSION="1" LANGU="E" DESCRIPT="JSON handler errors" MTDTYPE="0" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
   <source>method SERIALIZE_ID.
**/***********************************************************/*
**/ New method using the built-in transformation              /*
**/ included in releases 7.02 and 7.03/7.31 (Kernelpatch 116) /*
**/ Generates both JSON and XML formats!!
**/***********************************************************/*
**/
*** Remember function parameter types
***constants:
***  abap_func_exporting type abap_func_parmbind-kind value 10,
***  abap_func_importing type abap_func_parmbind-kind value 20,
***  abap_func_tables    type abap_func_parmbind-kind value 30,
***  abap_func_changing  type abap_func_parmbind-kind value 40.
*
*  type-pools: ABAP.
*
*  data:
*    stab type ABAP_TRANS_SRCBIND_TAB,
*    slin type ABAP_TRANS_SRCBIND,
*    oexcp type ref to cx_root,
*    etext type string,
*    adata type ref to data,
*    json_writer type ref to cl_sxml_string_writer.
*
*  field-symbols &lt;parm&gt; type abap_func_parmbind.
**  field-symbols &lt;excep&gt; type abap_func_excpbind.
*
*
*  loop at paramtab assigning &lt;parm&gt;.
*    if show_impp ne &apos;X&apos;
*          and &lt;parm&gt;-kind eq abap_func_exporting. &quot;&quot; va al revés, cuidado!!!
*      continue.
*    endif.
*    slin-name  = &lt;parm&gt;-name.
*    slin-value = &lt;parm&gt;-value.
*    append slin to stab. clear slin.
*  endloop.
*
*  if exceptab is not initial.
*    slin-name  = &apos;EXCEPTION&apos;.
*    get reference of exceptab into adata.
*    slin-value = adata.
*    append slin to stab. clear slin.
*  endif.
*
*
*  json_writer = cl_sxml_string_writer=&gt;create( type = if_sxml=&gt;co_xt_json ).
*
*  try.
*
*      case format.
*
*        when &apos;XML&apos;.
*
*          call transformation id options data_refs = &apos;embedded&apos;
*                                         initial_components = &apos;include&apos;
*                                 source (stab)
*                                 result xml o_string.
*
*
*        when others.
*
*          call transformation id options data_refs = &apos;embedded&apos;
*                                         initial_components = &apos;include&apos;
*                                 source (stab)
*                                 result xml json_writer.
*
*          o_string = cl_abap_codepage=&gt;convert_from( json_writer-&gt;get_output( ) ).
**  json_string = json_writer-&gt;get_output( ).
*
*          if jsonp is not initial.
*            concatenate jsonp &apos;(&apos; o_string &apos;);&apos; into o_string.
*          endif.
*
*      endcase.
*
*
*    catch cx_root into oexcp.
*
*      etext = oexcp-&gt;if_message~get_text( ).
*      RAISE EXCEPTION type zcx_json
*        EXPORTING
*          message = etext.
*
*  endtry.


endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_JSON" VERSION="1" LANGU="E" DESCRIPT="Serialize function data to JSON" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_JSON" SCONAME="PARAMTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND_TAB"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_JSON" SCONAME="PARAMS" VERSION="1" LANGU="E" DESCRIPT="Should be type table of RFC_FINT_P" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_JSON" SCONAME="EXCEPTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_EXCPBIND_TAB" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_JSON" SCONAME="SHOW_IMPP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_JSON" SCONAME="JSONP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_JSON" SCONAME="LOWERCASE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_JSON" SCONAME="O_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method SERIALIZE_JSON.
* ABAP based JSON serializer for function modules (January 2013).
  type-pools: ABAP.

** Remember function parameter types
**constants:
**  abap_func_exporting type abap_func_parmbind-kind value 10,
**  abap_func_importing type abap_func_parmbind-kind value 20,
**  abap_func_tables    type abap_func_parmbind-kind value 30,
**  abap_func_changing  type abap_func_parmbind-kind value 40.

  data json_fragments type table of string.
  data rec_json_string type string.
  data paramname type string.
  data l_lines type i.
  data l_index type i.
  data upcase type xfeld value &apos;X&apos;.
  field-symbols &lt;parm&gt; type abap_func_parmbind.
  field-symbols &lt;excep&gt; type abap_func_excpbind.

  if jsonp is not initial.
    append jsonp to json_fragments.
    append &apos;(&apos; to json_fragments.
  endif.

  rec_json_string = &apos;{&apos;.
  append rec_json_string to json_fragments.
  clear rec_json_string.

  clear l_index.
  l_lines = lines( paramtab ).

  loop at paramtab assigning &lt;parm&gt;.
    if show_impp ne &apos;X&apos;
          and &lt;parm&gt;-kind eq abap_func_exporting. &quot;&quot; va al revés, cuidado!!!
      subtract 1 from l_lines.
      continue.
    endif.
    add 1 to l_index.
    paramname = &lt;parm&gt;-name.
    if lowercase eq abap_true.
      translate paramname to lower case.
      upcase = space.
    endif.
    rec_json_string = abap2json( abap_data = &lt;parm&gt;-value  name = paramname  upcase = upcase ).
    append rec_json_string to json_fragments.
    clear rec_json_string.
    if l_index &lt; l_lines.
      append &apos;,&apos; to json_fragments .
    endif .
  endloop.

  if exceptab is not initial.
    if l_lines gt 0.
      append &apos;,&apos; to json_fragments.
    endif.
    rec_json_string = abap2json( abap_data = exceptab upcase = &apos;X&apos; name = &apos;EXCEPTION&apos;).
    append rec_json_string to json_fragments.
    clear rec_json_string.
  endif.

  rec_json_string = &apos;}&apos;.
  append rec_json_string to json_fragments.
  clear rec_json_string.

  if jsonp is not initial.
    append &apos;);&apos; to json_fragments.
  endif.

  concatenate lines of json_fragments into o_string.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" VERSION="1" LANGU="E" DESCRIPT="Serialize function data to Perl Data::Dumper" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" SCONAME="PARAMTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND_TAB"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" SCONAME="PARAMS" VERSION="1" LANGU="E" DESCRIPT="Should be type table of RFC_FINT_P" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" SCONAME="EXCEPTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_EXCPBIND_TAB" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" SCONAME="SHOW_IMPP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" SCONAME="JSONP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" SCONAME="LOWERCASE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" SCONAME="FUNCNAME" VERSION="1" LANGU="E" DESCRIPT="Name of Function Module" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L_FNAM"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_PERL" SCONAME="PERL_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method SERIALIZE_PERL.
* Just for fun, generate data in Perl Data::Dumper format.

  type-pools: ABAP.

**Remember function parameter types
**constants:
**  abap_func_exporting type abap_func_parmbind-kind value 10,
**  abap_func_importing type abap_func_parmbind-kind value 20,
**  abap_func_tables    type abap_func_parmbind-kind value 30,
**  abap_func_changing  type abap_func_parmbind-kind value 40.

  data perl_fragments type table of string.
  data rec_perl_string type string.
  data paramname type string.
  data l_lines type i.
  data l_index type i.
  data upcase type xfeld value &apos;X&apos;.
  data perl_var type string.
  field-symbols &lt;parm&gt; type abap_func_parmbind.
  field-symbols &lt;excep&gt; type abap_func_excpbind.

  if jsonp is not initial.
    perl_var = jsonp.
  else.
    perl_var = funcname.
  endif.
  concatenate &apos;$&apos; perl_var &apos; = {&apos; into rec_perl_string.
  append rec_perl_string to perl_fragments.
  clear rec_perl_string.

  clear l_index.
  l_lines = lines( paramtab ).

  loop at paramtab assigning &lt;parm&gt;.
    if show_impp ne &apos;X&apos;
          and &lt;parm&gt;-kind eq abap_func_exporting. &quot;&quot; va al revés, cuidado!!!
      subtract 1 from l_lines.
      continue.
    endif.
    add 1 to l_index.
    paramname = &lt;parm&gt;-name.
    if lowercase eq abap_true.
      translate paramname to lower case.
      upcase = space.
    endif.
    rec_perl_string = abap2perl( abap_data = &lt;parm&gt;-value  name = paramname  upcase = upcase ).
    append rec_perl_string to perl_fragments.
    clear rec_perl_string.
    if l_index &lt; l_lines.
      append &apos;,&apos; to perl_fragments .
    endif .
  endloop.

  if exceptab is not initial.
    if l_lines gt 0.
      append &apos;,&apos; to perl_fragments.
    endif.
    rec_perl_string = abap2perl( abap_data = exceptab upcase = &apos;X&apos; name = &apos;EXCEPTION&apos;).
    append rec_perl_string to perl_fragments.
    clear rec_perl_string.
  endif.

  rec_perl_string = &apos;};&apos;.
  append rec_perl_string to perl_fragments.
  clear rec_perl_string.

  concatenate lines of perl_fragments into perl_string.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" VERSION="1" LANGU="E" DESCRIPT="Serialize function data to XML" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="PARAMTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND_TAB"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="PARAMS" VERSION="1" LANGU="E" DESCRIPT="Should be type table of RFC_FINT_P" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="EXCEPTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_EXCPBIND_TAB" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="SHOW_IMPP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="JSONP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="FUNCNAME" VERSION="1" LANGU="E" DESCRIPT="Name of Function Module" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L_FNAM"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="LOWERCASE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="FORMAT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_XML" SCONAME="O_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method SERIALIZE_XML.
* Serialize function data into simple XML
*/ Look at method serialize_id for a new way of doing XML.

  type-pools: ABAP.

** Remember function parameter types
***constants:
***  abap_func_exporting type abap_func_parmbind-kind value 10,
***  abap_func_importing type abap_func_parmbind-kind value 20,
***  abap_func_tables    type abap_func_parmbind-kind value 30,
***  abap_func_changing  type abap_func_parmbind-kind value 40.

  data rec_xml_string type string.
  data xml_fragments type table of string.
  data l_funcname type string.
  data paramname type string.
  field-symbols &lt;parm&gt; type abap_func_parmbind.
  field-symbols &lt;excep&gt; type abap_func_excpbind.
    data upcase type xfeld value &apos;X&apos;.

  constants:
     xml_head type string value &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&apos;.

  append xml_head to xml_fragments.

  l_funcname = funcname.
  if lowercase eq abap_true.
     translate l_funcname to lower case.
     upcase = space.
  endif.

  concatenate &apos;&lt;&apos; l_funcname &apos;&gt;&apos; into rec_xml_string.
  append rec_xml_string to xml_fragments.

  loop at paramtab assigning &lt;parm&gt;.
    if show_impp ne &apos;X&apos;
          and &lt;parm&gt;-kind eq abap_func_exporting. &quot;&quot; va al revés, cuidado!!!
      continue.
    endif.
    paramname = &lt;parm&gt;-name.
    if lowercase eq abap_true.
       translate paramname to lower case.
    endif.
    rec_xml_string = abap2xml( name = paramname abap_data = &lt;parm&gt;-value upcase = upcase ).
    append rec_xml_string to xml_fragments.
  endloop.

  if exceptab is not initial.
    rec_xml_string = abap2xml( name = &apos;EXCEPTION&apos; abap_data = exceptab  upcase = upcase ).
    append rec_xml_string to xml_fragments.
  endif.

  concatenate &apos;&lt;/&apos; l_funcname &apos;&gt;&apos; into rec_xml_string.
  append rec_xml_string to xml_fragments.

  concatenate lines of xml_fragments into o_string.

endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_YAML" VERSION="1" LANGU="E" DESCRIPT="Serialize function data to YAML" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_YAML" SCONAME="PARAMTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND_TAB"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_YAML" SCONAME="PARAMS" VERSION="1" LANGU="E" DESCRIPT="Should be type table of RFC_FINT_P" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_YAML" SCONAME="EXCEPTAB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_FUNC_EXCPBIND_TAB" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_YAML" SCONAME="SHOW_IMPP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_YAML" SCONAME="JSONP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_YAML" SCONAME="LOWERCASE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_JSON_HANDLER" CMPNAME="SERIALIZE_YAML" SCONAME="YAML_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method SERIALIZE_YAML.
* Now, go and represent function data in YAML (http://yaml.org)

  type-pools: ABAP.
** Remember function parameter types
**constants:
**  abap_func_exporting type abap_func_parmbind-kind value 10,
**  abap_func_importing type abap_func_parmbind-kind value 20,
**  abap_func_tables    type abap_func_parmbind-kind value 30,
**  abap_func_changing  type abap_func_parmbind-kind value 40.

  data yaml_fragments type table of string.
  data rec_yaml_string type string.
  data rec_yaml_table type table of string.
  data paramname type string.
  field-symbols &lt;parm&gt; type abap_func_parmbind.
  field-symbols &lt;excep&gt; type abap_func_excpbind.
  data upcase type xfeld value &apos;X&apos;.
  data yaml_head type string value &apos;--- #YAML:1.0&apos;.

  concatenate yaml_head xnl into rec_yaml_string.
  append rec_yaml_string to yaml_fragments.
  clear rec_yaml_string.

  loop at paramtab assigning &lt;parm&gt;.
    if show_impp ne &apos;X&apos;
          and &lt;parm&gt;-kind eq abap_func_exporting. &quot;&quot; va al revés, cuidado!!!
      continue.
    endif.
    paramname = &lt;parm&gt;-name.
    if lowercase eq abap_true.
       translate paramname to lower case.
       upcase = space.
    endif.
    rec_yaml_string = abap2yaml( abap_data = &lt;parm&gt;-value  name = paramname upcase = upcase ).
    append rec_yaml_string to yaml_fragments.
    clear rec_yaml_string.
  endloop.

  if exceptab is not initial.
    rec_yaml_string = abap2yaml( abap_data = exceptab name = &apos;EXCEPTION&apos; upcase = &apos;X&apos; ).
    append rec_yaml_string to yaml_fragments.
    clear rec_yaml_string.
  endif.

*  append xnl to yaml_fragments.

  concatenate lines of yaml_fragments into yaml_string.

*  if jsonp is not initial.
*     concatenate jsonp &apos;(&apos; yaml_string &apos;);&apos; into yaml_string.
*  endif.

endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCX_JSON" VERSION="1" LANGU="E" DESCRIPT="JSON handler errors" UUID="000C29E6E17A1EE49C9FF0AC882B28E6" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_STATIC_CHECK">
  <publicSection>class ZCX_JSON definition
  public
  inheriting from CX_STATIC_CHECK
  final
  create public .

*&quot;* public components of class ZCX_JSON
*&quot;* do not include other source files here!!!
public section.

  constants ZCX_JSON type SOTR_CONC value &apos;53420FA349A51A00E10080000A01314D&apos;. &quot;#EC NOTEXT
  data MESSAGE type STRING value &apos;undefined&apos;. &quot;#EC NOTEXT .

  methods CONSTRUCTOR
    importing
      !TEXTID like TEXTID optional
      !PREVIOUS like PREVIOUS optional
      !MESSAGE type STRING default &apos;undefined&apos; .</publicSection>
  <protectedSection>*&quot;* protected components of class ZCX_JSON
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
  <privateSection>*&quot;* private components of class ZCX_JSON
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZCX_JSON" CMPNAME="MESSAGE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="0" ATTVALUE="&apos;undefined&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="700" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_JSON" CMPNAME="ZCX_JSON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" ATTDECLTYP="2" ATTVALUE="&apos;54751655C3821F90E10080000A01314D&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" R3RELEASE="700" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" CREA_NAME="TETREAUL_SAP" CREA_TSTUT="20141126175223" CHAN_NAME="TETREAUL_SAP" CHAN_TSTUT="20141126175223" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" CREA_NAME="TETREAUL_SAP" CREA_TSTUT="20141126175223" CHAN_NAME="TETREAUL_SAP" CHAN_TSTUT="20141126175223" STATUS="R" VERSION="0002" LENGTH="255" TEXT="JSON error: &amp;MESSAGE&amp;"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_JSON" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1" AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126"/>
  <method CLSNAME="ZCX_JSON" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" MTDTYPE="2" MTDDECLTYP="0" LOCKED="X" R3RELEASE="700" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCX_JSON" CMPNAME="CONSTRUCTOR" SCONAME="TEXTID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0" TYPE="TEXTID" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCX_JSON" CMPNAME="CONSTRUCTOR" SCONAME="PREVIOUS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0" TYPE="PREVIOUS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCX_JSON" CMPNAME="CONSTRUCTOR" SCONAME="MESSAGE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " AUTHOR="TETREAUL_SAP" CREATEDON="20140407" CHANGEDBY="TETREAUL_SAP" CHANGEDON="20141126" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="&apos;undefined&apos;"/>
   <source>method CONSTRUCTOR.
CALL METHOD SUPER-&gt;CONSTRUCTOR
EXPORTING
TEXTID = TEXTID
PREVIOUS = PREVIOUS
.
 IF textid IS INITIAL.
   me-&gt;textid = ZCX_JSON .
 ENDIF.
me-&gt;MESSAGE = MESSAGE .
endmethod.</source>
   <methodDocumentation/>
   <methodDocumentation/>
   <methodDocumentation/>
  </method>
 </CLAS>
 <TABL TABNAME="ZICF_HANDLER_DATA" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="JSON HANDLER Interchange Data" AUTHCLASS="00" AS4USER="TETREAUL_SAP" AS4DATE="20140909" AS4TIME="155309" PROZPUFF="000" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000" AS4DATE="00000000" AS4TIME="000000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="REQUEST_METHOD" DDLANGUAGE="E" POSITION="0001" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="HTTP_CODE" DDLANGUAGE="E" POSITION="0002" ADMINFIELD="0" INTTYPE="X" INTLEN="000004" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="INT4" LENG="000010" OUTPUTLEN="000000" DECIMALS="000000" MASK="  INT4" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="HTTP_STATUS" DDLANGUAGE="E" POSITION="0003" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="ERROR_MESSAGE" DDLANGUAGE="E" POSITION="0004" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="LOCATION_HEADER" DDLANGUAGE="E" POSITION="0005" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="ICF_URL" DDLANGUAGE="E" POSITION="0006" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="ICF_SERVICE" DDLANGUAGE="E" POSITION="0007" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="PATH_INFO" DDLANGUAGE="E" POSITION="0008" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="DELETE_PARAMS" DDLANGUAGE="E" POSITION="0009" ROLLNAME="STRINGTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Table with Strings" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="I_JSON_DATA" DDLANGUAGE="E" POSITION="0010" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="QS_TAB" DDLANGUAGE="E" POSITION="0011" ROLLNAME="TIHTTPNVP" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="HTTP Framework (iHTTP) Table Name/Value Pairs" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="ALT_RESPONSE" DDLANGUAGE="E" POSITION="0012" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZICF_HANDLER_DATA" FIELDNAME="SERVER" DDLANGUAGE="E" POSITION="0013" ROLLNAME="IF_HTTP_SERVER" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="REF" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  REF RI" MASKLEN="0000" DDTEXT="HTTP Framework (iHTTP) HTTP Server" DEPTH="00" COMPTYPE="R" REFTYPE="I" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
</nugget>
